{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.2","compilation":{"directory":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50],"program":"/Users/connorcantrell/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","regex_syntax","/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=ec507fcdcaf7dfa1","-C","extra-filename=-ec507fcdcaf7dfa1","--out-dir","/Users/connorcantrell/rust/exercises/web_server/hello/target/rls/debug/deps","-L","dependency=/Users/connorcantrell/rust/exercises/web_server/hello/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/connorcantrell/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,114,117,115,116,47,101,120,101,114,99,105,115,101,115,47,119,101,98,95,115,101,114,118,101,114,47,104,101,108,108,111,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,114,101,103,101,120,95,115,121,110,116,97,120,45,101,99,53,48,55,102,99,100,99,97,102,55,100,102,97,49,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"regex_syntax","disambiguator":[14633148367458729877,17666710619344816614]},"crate_root":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src","external_crates":[{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15203638810868597712,17300442013722141670]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11146009991168716943,2172830830702649436]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15762031658991204948,3568202897914550072]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17333171034018679256,2583489994995213704]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7572029546031900894,6058451623646108603]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10116742577119454640,15647942667803333541]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[16133654549234031812,9292969963890267565]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[1220330951077624249,617936659968857689]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[6425346779123324081,2910869620102085754]}},{"file_name":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[17757408737819865343,12366128222706934414]}}],"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":12015,"line_start":1,"line_end":310,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2732},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7193,"byte_end":7198,"line_start":160,"line_end":160,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":662},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7200,"byte_end":7206,"line_start":160,"line_end":160,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3352},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7226,"byte_end":7232,"line_start":161,"line_end":161,"column_start":18,"column_end":24},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3338},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7234,"byte_end":7247,"line_start":161,"line_end":161,"column_start":26,"column_end":39},"alias_span":null,"name":"ParserBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3374},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7267,"byte_end":7283,"line_start":162,"line_end":162,"column_start":18,"column_end":34},"alias_span":null,"name":"UnicodeWordError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12155,"byte_end":12160,"line_start":9,"line_end":9,"column_start":24,"column_end":29},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":20}},{"kind":"Use","ref_id":{"krate":0,"index":394},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12162,"byte_end":12169,"line_start":9,"line_end":9,"column_start":31,"column_end":38},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":20}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313323,"byte_end":313328,"line_start":15,"line_end":15,"column_start":24,"column_end":29},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":710}},{"kind":"Use","ref_id":{"krate":0,"index":1260},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313330,"byte_end":313337,"line_start":15,"line_end":15,"column_start":31,"column_end":38},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":710}},{"kind":"Use","ref_id":{"krate":0,"index":3368},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313357,"byte_end":313370,"line_start":16,"line_end":16,"column_start":18,"column_end":31},"alias_span":null,"name":"CaseFoldError","value":"","parent":{"krate":0,"index":710}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":12015,"line_start":1,"line_end":310,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":710},{"krate":0,"index":1534},{"krate":0,"index":1572},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782},{"krate":0,"index":1784},{"krate":0,"index":1786},{"krate":0,"index":1788}],"decl_id":null,"docs":"This crate provides a robust regular expression parser.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7129,"byte_end":7151,"line_start":157,"line_end":157,"column_start":1,"column_end":23}},{"value":"forbid(unsafe_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7152,"byte_end":7175,"line_start":158,"line_end":158,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ast","qualname":"::ast","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/ast/mod.rs","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":34},{"krate":0,"index":272},{"krate":0,"index":384},{"krate":0,"index":1888},{"krate":0,"index":1904},{"krate":0,"index":1900},{"krate":0,"index":1896},{"krate":0,"index":1890},{"krate":0,"index":472},{"krate":0,"index":1908},{"krate":0,"index":1924},{"krate":0,"index":1920},{"krate":0,"index":1916},{"krate":0,"index":1910},{"krate":0,"index":484},{"krate":0,"index":490},{"krate":0,"index":494},{"krate":0,"index":1928},{"krate":0,"index":1942},{"krate":0,"index":1940},{"krate":0,"index":1936},{"krate":0,"index":1930},{"krate":0,"index":500},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":1946},{"krate":0,"index":1960},{"krate":0,"index":1958},{"krate":0,"index":1954},{"krate":0,"index":1948},{"krate":0,"index":512},{"krate":0,"index":516},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":538},{"krate":0,"index":1964},{"krate":0,"index":1980},{"krate":0,"index":1976},{"krate":0,"index":1972},{"krate":0,"index":1966},{"krate":0,"index":1984},{"krate":0,"index":2000},{"krate":0,"index":1996},{"krate":0,"index":1992},{"krate":0,"index":1986},{"krate":0,"index":2004},{"krate":0,"index":2020},{"krate":0,"index":2016},{"krate":0,"index":2012},{"krate":0,"index":2006},{"krate":0,"index":542},{"krate":0,"index":550},{"krate":0,"index":2024},{"krate":0,"index":2040},{"krate":0,"index":2036},{"krate":0,"index":2032},{"krate":0,"index":2026},{"krate":0,"index":556},{"krate":0,"index":2044},{"krate":0,"index":2060},{"krate":0,"index":2056},{"krate":0,"index":2052},{"krate":0,"index":2046},{"krate":0,"index":560},{"krate":0,"index":2064},{"krate":0,"index":2080},{"krate":0,"index":2076},{"krate":0,"index":2072},{"krate":0,"index":2066},{"krate":0,"index":564},{"krate":0,"index":2084},{"krate":0,"index":2100},{"krate":0,"index":2096},{"krate":0,"index":2092},{"krate":0,"index":2086},{"krate":0,"index":2104},{"krate":0,"index":2118},{"krate":0,"index":2114},{"krate":0,"index":2110},{"krate":0,"index":2106},{"krate":0,"index":2122},{"krate":0,"index":2136},{"krate":0,"index":2132},{"krate":0,"index":2128},{"krate":0,"index":2124},{"krate":0,"index":568},{"krate":0,"index":2140},{"krate":0,"index":2156},{"krate":0,"index":2152},{"krate":0,"index":2148},{"krate":0,"index":2142},{"krate":0,"index":572},{"krate":0,"index":2160},{"krate":0,"index":2176},{"krate":0,"index":2172},{"krate":0,"index":2168},{"krate":0,"index":2162},{"krate":0,"index":2180},{"krate":0,"index":2194},{"krate":0,"index":2190},{"krate":0,"index":2186},{"krate":0,"index":2182},{"krate":0,"index":2198},{"krate":0,"index":2214},{"krate":0,"index":2210},{"krate":0,"index":2206},{"krate":0,"index":2200},{"krate":0,"index":2218},{"krate":0,"index":2232},{"krate":0,"index":2228},{"krate":0,"index":2224},{"krate":0,"index":2220},{"krate":0,"index":576},{"krate":0,"index":2236},{"krate":0,"index":2252},{"krate":0,"index":2248},{"krate":0,"index":2244},{"krate":0,"index":2238},{"krate":0,"index":582},{"krate":0,"index":2256},{"krate":0,"index":2272},{"krate":0,"index":2268},{"krate":0,"index":2264},{"krate":0,"index":2258},{"krate":0,"index":2276},{"krate":0,"index":2290},{"krate":0,"index":2286},{"krate":0,"index":2282},{"krate":0,"index":2278},{"krate":0,"index":586},{"krate":0,"index":2294},{"krate":0,"index":2310},{"krate":0,"index":2306},{"krate":0,"index":2302},{"krate":0,"index":2296},{"krate":0,"index":2314},{"krate":0,"index":2330},{"krate":0,"index":2326},{"krate":0,"index":2322},{"krate":0,"index":2316},{"krate":0,"index":590},{"krate":0,"index":2334},{"krate":0,"index":2350},{"krate":0,"index":2346},{"krate":0,"index":2342},{"krate":0,"index":2336},{"krate":0,"index":598},{"krate":0,"index":2354},{"krate":0,"index":2370},{"krate":0,"index":2366},{"krate":0,"index":2362},{"krate":0,"index":2356},{"krate":0,"index":602},{"krate":0,"index":2374},{"krate":0,"index":2390},{"krate":0,"index":2386},{"krate":0,"index":2382},{"krate":0,"index":2376},{"krate":0,"index":606},{"krate":0,"index":2394},{"krate":0,"index":2410},{"krate":0,"index":2406},{"krate":0,"index":2402},{"krate":0,"index":2396},{"krate":0,"index":2414},{"krate":0,"index":2430},{"krate":0,"index":2428},{"krate":0,"index":2424},{"krate":0,"index":2420},{"krate":0,"index":2416},{"krate":0,"index":2434},{"krate":0,"index":2450},{"krate":0,"index":2446},{"krate":0,"index":2442},{"krate":0,"index":2436},{"krate":0,"index":2454},{"krate":0,"index":2468},{"krate":0,"index":2464},{"krate":0,"index":2460},{"krate":0,"index":2456},{"krate":0,"index":2472},{"krate":0,"index":2488},{"krate":0,"index":2484},{"krate":0,"index":2480},{"krate":0,"index":2474},{"krate":0,"index":2492},{"krate":0,"index":2508},{"krate":0,"index":2504},{"krate":0,"index":2500},{"krate":0,"index":2494},{"krate":0,"index":2512},{"krate":0,"index":2528},{"krate":0,"index":2524},{"krate":0,"index":2520},{"krate":0,"index":2514},{"krate":0,"index":2532},{"krate":0,"index":2548},{"krate":0,"index":2544},{"krate":0,"index":2540},{"krate":0,"index":2534},{"krate":0,"index":612},{"krate":0,"index":2552},{"krate":0,"index":2568},{"krate":0,"index":2564},{"krate":0,"index":2560},{"krate":0,"index":2554},{"krate":0,"index":616},{"krate":0,"index":2572},{"krate":0,"index":2588},{"krate":0,"index":2584},{"krate":0,"index":2580},{"krate":0,"index":2574},{"krate":0,"index":2592},{"krate":0,"index":2608},{"krate":0,"index":2604},{"krate":0,"index":2600},{"krate":0,"index":2594},{"krate":0,"index":2612},{"krate":0,"index":2628},{"krate":0,"index":2624},{"krate":0,"index":2620},{"krate":0,"index":2614},{"krate":0,"index":2632},{"krate":0,"index":2648},{"krate":0,"index":2644},{"krate":0,"index":2640},{"krate":0,"index":2634},{"krate":0,"index":624},{"krate":0,"index":2652},{"krate":0,"index":2668},{"krate":0,"index":2664},{"krate":0,"index":2660},{"krate":0,"index":2654},{"krate":0,"index":2672},{"krate":0,"index":2688},{"krate":0,"index":2684},{"krate":0,"index":2680},{"krate":0,"index":2674},{"krate":0,"index":630},{"krate":0,"index":2692},{"krate":0,"index":2708},{"krate":0,"index":2706},{"krate":0,"index":2702},{"krate":0,"index":2698},{"krate":0,"index":2694},{"krate":0,"index":634},{"krate":0,"index":640}],"decl_id":null,"docs":"Defines an abstract syntax for regular expressions.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::ast::parse","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/ast/parse.rs","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":1790},{"krate":0,"index":1806},{"krate":0,"index":1802},{"krate":0,"index":1798},{"krate":0,"index":1792},{"krate":0,"index":64},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":1810},{"krate":0,"index":1816},{"krate":0,"index":1812},{"krate":0,"index":84},{"krate":0,"index":88},{"krate":0,"index":1820},{"krate":0,"index":1826},{"krate":0,"index":1822},{"krate":0,"index":1830},{"krate":0,"index":1836},{"krate":0,"index":1832},{"krate":0,"index":1840},{"krate":0,"index":1846},{"krate":0,"index":1842},{"krate":0,"index":1850},{"krate":0,"index":1856},{"krate":0,"index":1852},{"krate":0,"index":100},{"krate":0,"index":110},{"krate":0,"index":182},{"krate":0,"index":1860},{"krate":0,"index":1862},{"krate":0,"index":240},{"krate":0,"index":250},{"krate":0,"index":270}],"decl_id":null,"docs":"This module provides a regular expression parser.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1810},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":65152,"byte_end":65165,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::ast::parse::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":405}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":65443,"byte_end":65446,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":65684,"byte_end":65689,"line_start":136,"line_end":136,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":67765,"byte_end":67775,"line_start":177,"line_end":177,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":68715,"byte_end":68720,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":69264,"byte_end":69281,"line_start":210,"line_end":210,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1820},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":69756,"byte_end":69762,"line_start":225,"line_end":225,"column_start":12,"column_end":18},"name":"Parser","qualname":"::ast::parse::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427}],"decl_id":null,"docs":" A regular expression parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":74252,"byte_end":74255,"line_start":331,"line_end":331,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":74392,"byte_end":74397,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<Ast>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into an abstract syntax tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":74630,"byte_end":74649,"line_start":342,"line_end":342,"column_start":12,"column_end":31},"name":"parse_with_comments","qualname":"<Parser>::parse_with_comments","value":"fn (&mut self, pattern: &str) -> Result<ast::WithComments>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression and return an abstract syntax tree with\n all of the comments found in the pattern.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":272},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::ast::print","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/ast/print.rs","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":282},{"krate":0,"index":1866},{"krate":0,"index":1872},{"krate":0,"index":1868},{"krate":0,"index":288},{"krate":0,"index":292},{"krate":0,"index":1876},{"krate":0,"index":1878},{"krate":0,"index":298},{"krate":0,"index":1882},{"krate":0,"index":1884},{"krate":0,"index":304},{"krate":0,"index":328}],"decl_id":null,"docs":"This module provides a regular expression printer for `Ast`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1876},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":266432,"byte_end":266439,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Printer","qualname":"::ast::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":487}],"decl_id":null,"docs":" A printer for a regular expression abstract syntax tree.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":266516,"byte_end":266519,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":266866,"byte_end":266871,"line_start":59,"line_end":59,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, ast: &Ast, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":394},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":284142,"byte_end":284149,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::ast::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":416},{"krate":0,"index":418}],"decl_id":null,"docs":" A trait for visiting an abstract syntax tree (AST) in depth first order.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":396},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":284200,"byte_end":284206,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ast::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" The result of visiting an AST.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":398},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":284269,"byte_end":284272,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Err","qualname":"::ast::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" An error that visiting an AST might return.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":284417,"byte_end":284423,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"finish","qualname":"::ast::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the AST or an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":284543,"byte_end":284548,"line_start":34,"line_end":34,"column_start":8,"column_end":13},"name":"start","qualname":"::ast::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the AST.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":284663,"byte_end":284672,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::ast::visitor::Visitor::visit_pre","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` before descending into child `Ast`\n nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":284849,"byte_end":284859,"line_start":44,"line_end":44,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::ast::visitor::Visitor::visit_post","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` after descending all of its child\n `Ast` nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":285045,"byte_end":285065,"line_start":50,"line_end":50,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::ast::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an\n [`Alternation`](struct.Alternation.html).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":285265,"byte_end":285289,"line_start":57,"line_end":57,"column_start":8,"column_end":32},"name":"visit_class_set_item_pre","qualname":"::ast::visitor::Visitor::visit_class_set_item_pre","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n before descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":285537,"byte_end":285562,"line_start":67,"line_end":67,"column_start":8,"column_end":33},"name":"visit_class_set_item_post","qualname":"::ast::visitor::Visitor::visit_class_set_item_post","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n after descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":285821,"byte_end":285850,"line_start":77,"line_end":77,"column_start":8,"column_end":37},"name":"visit_class_set_binary_op_pre","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_pre","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n before descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":286112,"byte_end":286142,"line_start":87,"line_end":87,"column_start":8,"column_end":38},"name":"visit_class_set_binary_op_post","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_post","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n after descending into child nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":286407,"byte_end":286435,"line_start":96,"line_end":96,"column_start":8,"column_end":36},"name":"visit_class_set_binary_op_in","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_in","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":394},"children":[],"decl_id":null,"docs":" This method is called between the left hand and right hand child nodes\n of a [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":287301,"byte_end":287306,"line_start":119,"line_end":119,"column_start":8,"column_end":13},"name":"visit","qualname":"::ast::visitor::visit","value":"fn <V> (ast: &Ast, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1888},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12673,"byte_end":12678,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Error","qualname":"::ast::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505}],"decl_id":null,"docs":" An error that occurred while parsing a regular expression into an abstract\n syntax tree.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12662,"byte_end":12936,"line_start":23,"line_end":31,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":13001,"byte_end":13005,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":13219,"byte_end":13226,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":13338,"byte_end":13342,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":13755,"byte_end":13769,"line_start":56,"line_end":56,"column_start":12,"column_end":26},"name":"auxiliary_span","qualname":"<Error>::auxiliary_span","value":"fn (&self) -> Option<&Span>","parent":null,"children":[],"decl_id":null,"docs":" Return an auxiliary span. This span exists only for some errors that\n benefit from being able to point to two locations in the original\n regular expression. For example, \"duplicate\" errors will have the\n main error position set to the duplicate occurrence while its\n auxiliary span will be set to the initial occurrence.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":507},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":14545,"byte_end":14565,"line_start":76,"line_end":76,"column_start":5,"column_end":25},"name":"CaptureLimitExceeded","qualname":"::ast::ErrorKind::CaptureLimitExceeded","value":"ErrorKind::CaptureLimitExceeded","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" The capturing group limit was exceeded.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":509},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":14642,"byte_end":14660,"line_start":78,"line_end":78,"column_start":5,"column_end":23},"name":"ClassEscapeInvalid","qualname":"::ast::ErrorKind::ClassEscapeInvalid","value":"ErrorKind::ClassEscapeInvalid","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An invalid escape sequence was found in a character class set.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":511},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":14797,"byte_end":14814,"line_start":81,"line_end":81,"column_start":5,"column_end":22},"name":"ClassRangeInvalid","qualname":"::ast::ErrorKind::ClassRangeInvalid","value":"ErrorKind::ClassRangeInvalid","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An invalid character class range was found. An invalid range is any\n range where the start is greater than the end.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":513},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15035,"byte_end":15052,"line_start":85,"line_end":85,"column_start":5,"column_end":22},"name":"ClassRangeLiteral","qualname":"::ast::ErrorKind::ClassRangeLiteral","value":"ErrorKind::ClassRangeLiteral","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An invalid range boundary was found in a character class. Range\n boundaries must be a single literal codepoint, but this error indicates\n that something else was found, such as a nested class.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":515},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15126,"byte_end":15139,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"ClassUnclosed","qualname":"::ast::ErrorKind::ClassUnclosed","value":"ErrorKind::ClassUnclosed","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An opening `[` was found with no corresponding closing `]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":517},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15418,"byte_end":15430,"line_start":92,"line_end":92,"column_start":5,"column_end":17},"name":"DecimalEmpty","qualname":"::ast::ErrorKind::DecimalEmpty","value":"ErrorKind::DecimalEmpty","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" Note that this error variant is no longer used. Namely, a decimal\n number can only appear as a repetition quantifier. When the number\n in a repetition quantifier is empty, then it gets its own specialized\n error, `RepetitionCountDecimalEmpty`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":519},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15504,"byte_end":15518,"line_start":94,"line_end":94,"column_start":5,"column_end":19},"name":"DecimalInvalid","qualname":"::ast::ErrorKind::DecimalInvalid","value":"ErrorKind::DecimalInvalid","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An invalid decimal number was given where one was expected.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":521},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15567,"byte_end":15581,"line_start":96,"line_end":96,"column_start":5,"column_end":19},"name":"EscapeHexEmpty","qualname":"::ast::ErrorKind::EscapeHexEmpty","value":"ErrorKind::EscapeHexEmpty","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A bracketed hex literal was empty.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":523},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15665,"byte_end":15681,"line_start":98,"line_end":98,"column_start":5,"column_end":21},"name":"EscapeHexInvalid","qualname":"::ast::ErrorKind::EscapeHexInvalid","value":"ErrorKind::EscapeHexInvalid","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A bracketed hex literal did not correspond to a Unicode scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15735,"byte_end":15756,"line_start":100,"line_end":100,"column_start":5,"column_end":26},"name":"EscapeHexInvalidDigit","qualname":"::ast::ErrorKind::EscapeHexInvalidDigit","value":"ErrorKind::EscapeHexInvalidDigit","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An invalid hexadecimal digit was found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":527},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15825,"byte_end":15844,"line_start":102,"line_end":102,"column_start":5,"column_end":24},"name":"EscapeUnexpectedEof","qualname":"::ast::ErrorKind::EscapeUnexpectedEof","value":"ErrorKind::EscapeUnexpectedEof","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" EOF was found before an escape sequence was completed.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":529},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15891,"byte_end":15909,"line_start":104,"line_end":104,"column_start":5,"column_end":23},"name":"EscapeUnrecognized","qualname":"::ast::ErrorKind::EscapeUnrecognized","value":"ErrorKind::EscapeUnrecognized","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An unrecognized escape sequence.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":15984,"byte_end":16004,"line_start":106,"line_end":106,"column_start":5,"column_end":25},"name":"FlagDanglingNegation","qualname":"::ast::ErrorKind::FlagDanglingNegation","value":"ErrorKind::FlagDanglingNegation","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A dangling negation was used when setting flags, e.g., `i-`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":533},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":16054,"byte_end":16067,"line_start":108,"line_end":108,"column_start":5,"column_end":18},"name":"FlagDuplicate","qualname":"::ast::ErrorKind::FlagDuplicate","value":"ErrorKind::FlagDuplicate { original }","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A flag was used twice, e.g., `i-i`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":537},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":16273,"byte_end":16293,"line_start":114,"line_end":114,"column_start":5,"column_end":25},"name":"FlagRepeatedNegation","qualname":"::ast::ErrorKind::FlagRepeatedNegation","value":"ErrorKind::FlagRepeatedNegation { original }","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" The negation operator was used twice, e.g., `-i-s`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":541},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":16514,"byte_end":16531,"line_start":120,"line_end":120,"column_start":5,"column_end":22},"name":"FlagUnexpectedEof","qualname":"::ast::ErrorKind::FlagUnexpectedEof","value":"ErrorKind::FlagUnexpectedEof","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" Expected a flag but got EOF, e.g., `(?`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":543},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":16575,"byte_end":16591,"line_start":122,"line_end":122,"column_start":5,"column_end":21},"name":"FlagUnrecognized","qualname":"::ast::ErrorKind::FlagUnrecognized","value":"ErrorKind::FlagUnrecognized","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" Unrecognized flag, e.g., `a`.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":545},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":16641,"byte_end":16659,"line_start":124,"line_end":124,"column_start":5,"column_end":23},"name":"GroupNameDuplicate","qualname":"::ast::ErrorKind::GroupNameDuplicate","value":"ErrorKind::GroupNameDuplicate { original }","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A duplicate capture name was found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":549},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":16901,"byte_end":16915,"line_start":130,"line_end":130,"column_start":5,"column_end":19},"name":"GroupNameEmpty","qualname":"::ast::ErrorKind::GroupNameEmpty","value":"ErrorKind::GroupNameEmpty","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A capture group name is empty, e.g., `(?P<>abc)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":551},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17121,"byte_end":17137,"line_start":134,"line_end":134,"column_start":5,"column_end":21},"name":"GroupNameInvalid","qualname":"::ast::ErrorKind::GroupNameInvalid","value":"ErrorKind::GroupNameInvalid","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An invalid character was seen for a capture group name. This includes\n errors where the first character is a digit (even though subsequent\n characters are allowed to be digits).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":553},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17210,"byte_end":17232,"line_start":136,"line_end":136,"column_start":5,"column_end":27},"name":"GroupNameUnexpectedEof","qualname":"::ast::ErrorKind::GroupNameUnexpectedEof","value":"ErrorKind::GroupNameUnexpectedEof","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A closing `>` could not be found for a capture group name.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":555},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17358,"byte_end":17371,"line_start":140,"line_end":140,"column_start":5,"column_end":18},"name":"GroupUnclosed","qualname":"::ast::ErrorKind::GroupUnclosed","value":"ErrorKind::GroupUnclosed","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An unclosed group, e.g., `(ab`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":557},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17417,"byte_end":17430,"line_start":142,"line_end":142,"column_start":5,"column_end":18},"name":"GroupUnopened","qualname":"::ast::ErrorKind::GroupUnopened","value":"ErrorKind::GroupUnopened","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An unopened group, e.g., `ab)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":559},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17542,"byte_end":17559,"line_start":145,"line_end":145,"column_start":5,"column_end":22},"name":"NestLimitExceeded","qualname":"::ast::ErrorKind::NestLimitExceeded","value":"ErrorKind::NestLimitExceeded(u32)","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" The nest limit was exceeded. The limit stored here is the limit\n configured in the parser.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":563},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17709,"byte_end":17731,"line_start":148,"line_end":148,"column_start":5,"column_end":27},"name":"RepetitionCountInvalid","qualname":"::ast::ErrorKind::RepetitionCountInvalid","value":"ErrorKind::RepetitionCountInvalid","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" The range provided in a counted repetition operator is invalid. The\n range is invalid if the start is greater than the end.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":565},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17852,"byte_end":17879,"line_start":151,"line_end":151,"column_start":5,"column_end":32},"name":"RepetitionCountDecimalEmpty","qualname":"::ast::ErrorKind::RepetitionCountDecimalEmpty","value":"ErrorKind::RepetitionCountDecimalEmpty","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An opening `{` was not followed by a valid decimal value.\n For example, `x{}` or `x{]}` would fail.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":567},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":17953,"byte_end":17976,"line_start":153,"line_end":153,"column_start":5,"column_end":28},"name":"RepetitionCountUnclosed","qualname":"::ast::ErrorKind::RepetitionCountUnclosed","value":"ErrorKind::RepetitionCountUnclosed","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" An opening `{` was found with no corresponding closing `}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":569},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":18290,"byte_end":18307,"line_start":158,"line_end":158,"column_start":5,"column_end":22},"name":"RepetitionMissing","qualname":"::ast::ErrorKind::RepetitionMissing","value":"ErrorKind::RepetitionMissing","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" A repetition operator was applied to a missing sub-expression. This\n occurs, for example, in the regex consisting of just a `*` or even\n `(?i)*`. It is, however, possible to create a repetition operating on\n an empty sub-expression. For example, `()*` is still considered valid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":571},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":18516,"byte_end":18540,"line_start":162,"line_end":162,"column_start":5,"column_end":29},"name":"UnsupportedBackreference","qualname":"::ast::ErrorKind::UnsupportedBackreference","value":"ErrorKind::UnsupportedBackreference","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" When octal support is disabled, this error is produced when an octal\n escape is used. The octal escape is assumed to be an invocation of\n a backreference, which is the common case.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":573},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":18897,"byte_end":18918,"line_start":168,"line_end":168,"column_start":5,"column_end":26},"name":"UnsupportedLookAround","qualname":"::ast::ErrorKind::UnsupportedLookAround","value":"ErrorKind::UnsupportedLookAround","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" When syntax similar to PCRE's look-around is used, this error is\n returned. Some example syntaxes that are rejected include, but are\n not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n error is used to improve the user experience.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":575},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":19198,"byte_end":19213,"line_start":175,"line_end":175,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::ast::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1908},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1908},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":14212,"byte_end":14221,"line_start":69,"line_end":69,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::ast::ErrorKind","value":"ErrorKind::{CaptureLimitExceeded, ClassEscapeInvalid, ClassRangeInvalid, ClassRangeLiteral, ClassUnclosed, DecimalEmpty, DecimalInvalid, EscapeHexEmpty, EscapeHexInvalid, EscapeHexInvalidDigit, EscapeUnexpectedEof, EscapeUnrecognized, FlagDanglingNegation, FlagDuplicate, FlagRepeatedNegation, FlagUnexpectedEof, FlagUnrecognized, GroupNameDuplicate, GroupNameEmpty, GroupNameInvalid, GroupNameUnexpectedEof, GroupUnclosed, GroupUnopened, NestLimitExceeded, RepetitionCountInvalid, RepetitionCountDecimalEmpty, RepetitionCountUnclosed, RepetitionMissing, UnsupportedBackreference, UnsupportedLookAround, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":537},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":559},{"krate":0,"index":563},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":575}],"decl_id":null,"docs":" The type of an error that occurred while building an AST.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":14203,"byte_end":19216,"line_start":69,"line_end":176,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1928},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25169,"byte_end":25173,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"Span","qualname":"::ast::Span","value":"Span { start, end }","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":579}],"decl_id":null,"docs":" Span represents the position information of a single AST item.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25158,"byte_end":25285,"line_start":314,"line_end":319,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25158,"byte_end":25285,"line_start":314,"line_end":319,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":577},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25215,"byte_end":25220,"line_start":316,"line_end":316,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::Span::start","value":"ast::Position","parent":{"krate":0,"index":1928},"children":[],"decl_id":null,"docs":" The start byte offset.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":579},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25269,"byte_end":25272,"line_start":318,"line_end":318,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::Span::end","value":"ast::Position","parent":{"krate":0,"index":1928},"children":[],"decl_id":null,"docs":" The end byte offset.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1946},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25918,"byte_end":25926,"line_start":344,"line_end":344,"column_start":12,"column_end":20},"name":"Position","qualname":"::ast::Position","value":"Position { offset, line, column }","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585}],"decl_id":null,"docs":" A single position in a regular expression.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25907,"byte_end":26226,"line_start":344,"line_end":352,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25907,"byte_end":26226,"line_start":344,"line_end":352,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":581},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26068,"byte_end":26074,"line_start":347,"line_end":347,"column_start":9,"column_end":15},"name":"offset","qualname":"::ast::Position::offset","value":"usize","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" The absolute offset of this position, starting at `0` from the\n beginning of the regular expression pattern string.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":583},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26133,"byte_end":26137,"line_start":349,"line_end":349,"column_start":9,"column_end":13},"name":"line","qualname":"::ast::Position::line","value":"usize","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" The line number, starting at `1`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":585},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26210,"byte_end":26216,"line_start":351,"line_end":351,"column_start":9,"column_end":15},"name":"column","qualname":"::ast::Position::column","value":"usize","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" The approximate column number, starting at `1`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26800,"byte_end":26803,"line_start":378,"line_end":378,"column_start":12,"column_end":15},"name":"new","qualname":"<Span>::new","value":"fn (start: Position, end: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span with the given positions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26977,"byte_end":26982,"line_start":383,"line_end":383,"column_start":12,"column_end":17},"name":"splat","qualname":"<Span>::splat","value":"fn (pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span using the given position as the start and end.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":27147,"byte_end":27157,"line_start":389,"line_end":389,"column_start":12,"column_end":22},"name":"with_start","qualname":"<Span>::with_start","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the starting the position with the one\n given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":27334,"byte_end":27342,"line_start":395,"line_end":395,"column_start":12,"column_end":20},"name":"with_end","qualname":"<Span>::with_end","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the ending the position with the one\n given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":27497,"byte_end":27508,"line_start":400,"line_end":400,"column_start":12,"column_end":23},"name":"is_one_line","qualname":"<Span>::is_one_line","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span occurs on a single line.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":27737,"byte_end":27745,"line_start":406,"line_end":406,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Span>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span is empty. That is, it points to\n a single position in the concrete syntax of a regular expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":28188,"byte_end":28191,"line_start":420,"line_end":420,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"fn (offset: usize, line: usize, column: usize) -> Position","parent":null,"children":[],"decl_id":null,"docs":" Create a new position with the given information.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1964},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":28633,"byte_end":28645,"line_start":432,"line_end":432,"column_start":12,"column_end":24},"name":"WithComments","qualname":"::ast::WithComments","value":"WithComments { ast, comments }","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":589}],"decl_id":null,"docs":" An abstract syntax tree for a singular expression along with comments\n found.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":28622,"byte_end":28786,"line_start":432,"line_end":437,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":587},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":28680,"byte_end":28683,"line_start":434,"line_end":434,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::WithComments::ast","value":"ast::Ast","parent":{"krate":0,"index":1964},"children":[],"decl_id":null,"docs":" The actual ast.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":589},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":28761,"byte_end":28769,"line_start":436,"line_end":436,"column_start":9,"column_end":17},"name":"comments","qualname":"::ast::WithComments::comments","value":"std::vec::Vec<ast::Comment>","parent":{"krate":0,"index":1964},"children":[],"decl_id":null,"docs":" All comments found in the original regular expression.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1984},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":28992,"byte_end":28999,"line_start":444,"line_end":444,"column_start":12,"column_end":19},"name":"Comment","qualname":"::ast::Comment","value":"Comment { span, comment }","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":593}],"decl_id":null,"docs":" A comment from a regular expression with an associated span.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":28981,"byte_end":29268,"line_start":444,"line_end":450,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":591},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29089,"byte_end":29093,"line_start":446,"line_end":446,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Comment::span","value":"ast::Span","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":" The span of this comment, including the beginning `#` and ending `\\n`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":593},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29250,"byte_end":29257,"line_start":449,"line_end":449,"column_start":9,"column_end":16},"name":"comment","qualname":"::ast::Comment::comment","value":"std::string::String","parent":{"krate":0,"index":1984},"children":[],"decl_id":null,"docs":" The comment text, starting with the first character following the `#`\n and ending with the last character preceding the `\\n`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":595},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29704,"byte_end":29709,"line_start":462,"line_end":462,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::Ast::Empty","value":"Ast::Empty(Span)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" An empty regex that matches everything.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":599},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29760,"byte_end":29765,"line_start":464,"line_end":464,"column_start":5,"column_end":10},"name":"Flags","qualname":"::ast::Ast::Flags","value":"Ast::Flags(SetFlags)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" A set of flags, e.g., `(?is)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":603},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29850,"byte_end":29857,"line_start":466,"line_end":466,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::Ast::Literal","value":"Ast::Literal(Literal)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" A single character literal, which includes escape sequences.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":607},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29907,"byte_end":29910,"line_start":468,"line_end":468,"column_start":5,"column_end":8},"name":"Dot","qualname":"::ast::Ast::Dot","value":"Ast::Dot(Span)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" The \"any character\" class.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":611},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29961,"byte_end":29970,"line_start":470,"line_end":470,"column_start":5,"column_end":14},"name":"Assertion","qualname":"::ast::Ast::Assertion","value":"Ast::Assertion(Assertion)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":615},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30136,"byte_end":30141,"line_start":473,"line_end":473,"column_start":5,"column_end":10},"name":"Class","qualname":"::ast::Ast::Class","value":"Ast::Class(Class)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" A single character class. This includes all forms of character classes\n except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":619},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30228,"byte_end":30238,"line_start":475,"line_end":475,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::ast::Ast::Repetition","value":"Ast::Repetition(Repetition)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" A repetition operator applied to an arbitrary regular expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":623},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30294,"byte_end":30299,"line_start":477,"line_end":477,"column_start":5,"column_end":10},"name":"Group","qualname":"::ast::Ast::Group","value":"Ast::Group(Group)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" A grouped regular expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":627},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30359,"byte_end":30370,"line_start":479,"line_end":479,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::ast::Ast::Alternation","value":"Ast::Alternation(Alternation)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":631},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30437,"byte_end":30443,"line_start":481,"line_end":481,"column_start":5,"column_end":11},"name":"Concat","qualname":"::ast::Ast::Concat","value":"Ast::Concat(Concat)","parent":{"krate":0,"index":2004},"children":[],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2004},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29646,"byte_end":29649,"line_start":460,"line_end":460,"column_start":10,"column_end":13},"name":"Ast","qualname":"::ast::Ast","value":"Ast::{Empty, Flags, Literal, Dot, Assertion, Class, Repetition, Group, Alternation, Concat}","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":599},{"krate":0,"index":603},{"krate":0,"index":607},{"krate":0,"index":611},{"krate":0,"index":615},{"krate":0,"index":619},{"krate":0,"index":623},{"krate":0,"index":627},{"krate":0,"index":631}],"decl_id":null,"docs":" An abstract syntax tree for a single regular expression.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":29637,"byte_end":30454,"line_start":460,"line_end":482,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30532,"byte_end":30536,"line_start":486,"line_end":486,"column_start":12,"column_end":16},"name":"span","qualname":"<Ast>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this abstract syntax tree.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":31096,"byte_end":31104,"line_start":502,"line_end":502,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Ast>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this Ast is empty.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2024},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32310,"byte_end":32321,"line_start":544,"line_end":544,"column_start":12,"column_end":23},"name":"Alternation","qualname":"::ast::Alternation","value":"Alternation { span, asts }","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":637}],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32299,"byte_end":32450,"line_start":544,"line_end":549,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":635},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32370,"byte_end":32374,"line_start":546,"line_end":546,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Alternation::span","value":"ast::Span","parent":{"krate":0,"index":2024},"children":[],"decl_id":null,"docs":" The span of this alternation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":637},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32433,"byte_end":32437,"line_start":548,"line_end":548,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Alternation::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":2024},"children":[],"decl_id":null,"docs":" The alternate regular expressions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32751,"byte_end":32759,"line_start":557,"line_end":557,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Alternation>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this alternation as an AST.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2044},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33048,"byte_end":33054,"line_start":568,"line_end":568,"column_start":12,"column_end":18},"name":"Concat","qualname":"::ast::Concat","value":"Concat { span, asts }","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":641}],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33037,"byte_end":33189,"line_start":568,"line_end":573,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":639},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33105,"byte_end":33109,"line_start":570,"line_end":570,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Concat::span","value":"ast::Span","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" The span of this concatenation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":641},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33172,"byte_end":33176,"line_start":572,"line_end":572,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Concat::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":2044},"children":[],"decl_id":null,"docs":" The concatenation regular expressions.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33486,"byte_end":33494,"line_start":581,"line_end":581,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Concat>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this concatenation as an AST.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2064},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33940,"byte_end":33947,"line_start":596,"line_end":596,"column_start":12,"column_end":19},"name":"Literal","qualname":"::ast::Literal","value":"Literal { span, kind, c }","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":645},{"krate":0,"index":647}],"decl_id":null,"docs":" A single literal expression.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33929,"byte_end":34147,"line_start":596,"line_end":603,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":643},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33992,"byte_end":33996,"line_start":598,"line_end":598,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Literal::span","value":"ast::Span","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" The span of this literal.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":645},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34046,"byte_end":34050,"line_start":600,"line_end":600,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Literal::kind","value":"ast::LiteralKind","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" The kind of this literal.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":647},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34137,"byte_end":34138,"line_start":602,"line_end":602,"column_start":9,"column_end":10},"name":"c","qualname":"::ast::Literal::c","value":"char","parent":{"krate":0,"index":2064},"children":[],"decl_id":null,"docs":" The Unicode scalar value corresponding to this literal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34321,"byte_end":34325,"line_start":608,"line_end":608,"column_start":12,"column_end":16},"name":"byte","qualname":"<Literal>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" If this literal was written as a `\\x` hex escape, then this returns\n the corresponding byte value. Otherwise, this returns `None`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":649},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34731,"byte_end":34739,"line_start":622,"line_end":622,"column_start":5,"column_end":13},"name":"Verbatim","qualname":"::ast::LiteralKind::Verbatim","value":"LiteralKind::Verbatim","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" The literal is written verbatim, e.g., `a` or `☃`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":651},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34844,"byte_end":34855,"line_start":625,"line_end":625,"column_start":5,"column_end":16},"name":"Punctuation","qualname":"::ast::LiteralKind::Punctuation","value":"LiteralKind::Punctuation","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" The literal is written as an escape because it is punctuation, e.g.,\n `\\*` or `\\[`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":653},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34926,"byte_end":34931,"line_start":627,"line_end":627,"column_start":5,"column_end":10},"name":"Octal","qualname":"::ast::LiteralKind::Octal","value":"LiteralKind::Octal","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" The literal is written as an octal escape, e.g., `\\141`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":655},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35110,"byte_end":35118,"line_start":631,"line_end":631,"column_start":5,"column_end":13},"name":"HexFixed","qualname":"::ast::LiteralKind::HexFixed","value":"LiteralKind::HexFixed(HexLiteralKind)","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a fixed number of digits\n depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or\n `\\U00000061`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35332,"byte_end":35340,"line_start":635,"line_end":635,"column_start":5,"column_end":13},"name":"HexBrace","qualname":"::ast::LiteralKind::HexBrace","value":"LiteralKind::HexBrace(HexLiteralKind)","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a bracketed number of\n digits. The only restriction is that the bracketed hex code must refer\n to a valid Unicode scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":663},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35455,"byte_end":35462,"line_start":638,"line_end":638,"column_start":5,"column_end":12},"name":"Special","qualname":"::ast::LiteralKind::Special","value":"LiteralKind::Special(SpecialLiteralKind)","parent":{"krate":0,"index":2084},"children":[],"decl_id":null,"docs":" The literal is written as a specially recognized escape, e.g., `\\f`\n or `\\n`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2084},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34652,"byte_end":34663,"line_start":620,"line_end":620,"column_start":10,"column_end":21},"name":"LiteralKind","qualname":"::ast::LiteralKind","value":"LiteralKind::{Verbatim, Punctuation, Octal, HexFixed, HexBrace, Special}","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":659},{"krate":0,"index":663}],"decl_id":null,"docs":" The kind of a single literal expression.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34643,"byte_end":35485,"line_start":620,"line_end":639,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":667},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35743,"byte_end":35747,"line_start":648,"line_end":648,"column_start":5,"column_end":9},"name":"Bell","qualname":"::ast::SpecialLiteralKind::Bell","value":"SpecialLiteralKind::Bell","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Bell, spelled `\\a` (`\\x07`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":669},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35795,"byte_end":35803,"line_start":650,"line_end":650,"column_start":5,"column_end":13},"name":"FormFeed","qualname":"::ast::SpecialLiteralKind::FormFeed","value":"SpecialLiteralKind::FormFeed","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Form feed, spelled `\\f` (`\\x0C`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":671},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35845,"byte_end":35848,"line_start":652,"line_end":652,"column_start":5,"column_end":8},"name":"Tab","qualname":"::ast::SpecialLiteralKind::Tab","value":"SpecialLiteralKind::Tab","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Tab, spelled `\\t` (`\\x09`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":673},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35896,"byte_end":35904,"line_start":654,"line_end":654,"column_start":5,"column_end":13},"name":"LineFeed","qualname":"::ast::SpecialLiteralKind::LineFeed","value":"SpecialLiteralKind::LineFeed","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Line feed, spelled `\\n` (`\\x0A`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":675},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35958,"byte_end":35972,"line_start":656,"line_end":656,"column_start":5,"column_end":19},"name":"CarriageReturn","qualname":"::ast::SpecialLiteralKind::CarriageReturn","value":"SpecialLiteralKind::CarriageReturn","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Carriage return, spelled `\\r` (`\\x0D`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":677},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36023,"byte_end":36034,"line_start":658,"line_end":658,"column_start":5,"column_end":16},"name":"VerticalTab","qualname":"::ast::SpecialLiteralKind::VerticalTab","value":"SpecialLiteralKind::VerticalTab","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Vertical tab, spelled `\\v` (`\\x0B`).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":679},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36147,"byte_end":36152,"line_start":661,"line_end":661,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::SpecialLiteralKind::Space","value":"SpecialLiteralKind::Space","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Space, spelled `\\ ` (`\\x20`). Note that this can only appear when\n parsing in verbose mode.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2104},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35681,"byte_end":35699,"line_start":646,"line_end":646,"column_start":10,"column_end":28},"name":"SpecialLiteralKind","qualname":"::ast::SpecialLiteralKind","value":"SpecialLiteralKind::{Bell, FormFeed, Tab, LineFeed, CarriageReturn, VerticalTab, Space}","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":675},{"krate":0,"index":677},{"krate":0,"index":679}],"decl_id":null,"docs":" The type of a special literal.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":35672,"byte_end":36155,"line_start":646,"line_end":662,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":681},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36530,"byte_end":36531,"line_start":673,"line_end":673,"column_start":5,"column_end":6},"name":"X","qualname":"::ast::HexLiteralKind::X","value":"HexLiteralKind::X","parent":{"krate":0,"index":2122},"children":[],"decl_id":null,"docs":" A `\\x` prefix. When used without brackets, this form is limited to\n two digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":683},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36633,"byte_end":36645,"line_start":676,"line_end":676,"column_start":5,"column_end":17},"name":"UnicodeShort","qualname":"::ast::HexLiteralKind::UnicodeShort","value":"HexLiteralKind::UnicodeShort","parent":{"krate":0,"index":2122},"children":[],"decl_id":null,"docs":" A `\\u` prefix. When used without brackets, this form is limited to\n four digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":685},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36748,"byte_end":36759,"line_start":679,"line_end":679,"column_start":5,"column_end":16},"name":"UnicodeLong","qualname":"::ast::HexLiteralKind::UnicodeLong","value":"HexLiteralKind::UnicodeLong","parent":{"krate":0,"index":2122},"children":[],"decl_id":null,"docs":" A `\\U` prefix. When used without brackets, this form is limited to\n eight digits.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2122},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36414,"byte_end":36428,"line_start":670,"line_end":670,"column_start":10,"column_end":24},"name":"HexLiteralKind","qualname":"::ast::HexLiteralKind","value":"HexLiteralKind::{X, UnicodeShort, UnicodeLong}","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":685}],"decl_id":null,"docs":" The type of a Unicode hex literal.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36405,"byte_end":36762,"line_start":670,"line_end":680,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36985,"byte_end":36991,"line_start":686,"line_end":686,"column_start":12,"column_end":18},"name":"digits","qualname":"<HexLiteralKind>::digits","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of digits that must be used with this literal form when\n used without brackets. When used with brackets, there is no\n restriction on the number of digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":687},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37342,"byte_end":37349,"line_start":699,"line_end":699,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":691},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37421,"byte_end":37425,"line_start":701,"line_end":701,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::Class::Perl","value":"Class::Perl(ClassPerl)","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":695},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37604,"byte_end":37613,"line_start":705,"line_end":705,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::Class::Bracketed","value":"Class::Bracketed(ClassBracketed)","parent":{"krate":0,"index":2140},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2140},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37267,"byte_end":37272,"line_start":697,"line_end":697,"column_start":10,"column_end":15},"name":"Class","qualname":"::ast::Class","value":"Class::{Unicode, Perl, Bracketed}","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":691},{"krate":0,"index":695}],"decl_id":null,"docs":" A single character class expression.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37258,"byte_end":37632,"line_start":697,"line_end":706,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37707,"byte_end":37711,"line_start":710,"line_end":710,"column_start":12,"column_end":16},"name":"span","qualname":"<Class>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2160},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37986,"byte_end":37995,"line_start":721,"line_end":721,"column_start":12,"column_end":21},"name":"ClassPerl","qualname":"::ast::ClassPerl","value":"ClassPerl { span, kind, negated }","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":703}],"decl_id":null,"docs":" A Perl character class.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37975,"byte_end":38227,"line_start":721,"line_end":729,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":699},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38038,"byte_end":38042,"line_start":723,"line_end":723,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassPerl::span","value":"ast::Span","parent":{"krate":0,"index":2160},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":701},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38090,"byte_end":38094,"line_start":725,"line_end":725,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassPerl::kind","value":"ast::ClassPerlKind","parent":{"krate":0,"index":2160},"children":[],"decl_id":null,"docs":" The kind of Perl class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":703},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38211,"byte_end":38218,"line_start":728,"line_end":728,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassPerl::negated","value":"bool","parent":{"krate":0,"index":2160},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `\\d` is not negated but\n `\\D` is.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":705},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38364,"byte_end":38369,"line_start":735,"line_end":735,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassPerlKind::Digit","value":"ClassPerlKind::Digit","parent":{"krate":0,"index":2180},"children":[],"decl_id":null,"docs":" Decimal numbers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":707},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38395,"byte_end":38400,"line_start":737,"line_end":737,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassPerlKind::Space","value":"ClassPerlKind::Space","parent":{"krate":0,"index":2180},"children":[],"decl_id":null,"docs":" Whitespace.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":709},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38431,"byte_end":38435,"line_start":739,"line_end":739,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassPerlKind::Word","value":"ClassPerlKind::Word","parent":{"krate":0,"index":2180},"children":[],"decl_id":null,"docs":" Word characters.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2180},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38319,"byte_end":38332,"line_start":733,"line_end":733,"column_start":10,"column_end":23},"name":"ClassPerlKind","qualname":"::ast::ClassPerlKind","value":"ClassPerlKind::{Digit, Space, Word}","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":709}],"decl_id":null,"docs":" The available Perl character classes.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38310,"byte_end":38438,"line_start":733,"line_end":740,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2198},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38520,"byte_end":38530,"line_start":744,"line_end":744,"column_start":12,"column_end":22},"name":"ClassAscii","qualname":"::ast::ClassAscii","value":"ClassAscii { span, kind, negated }","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":715}],"decl_id":null,"docs":" An ASCII character class.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38509,"byte_end":38783,"line_start":744,"line_end":752,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":711},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38573,"byte_end":38577,"line_start":746,"line_end":746,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassAscii::span","value":"ast::Span","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":713},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38626,"byte_end":38630,"line_start":748,"line_end":748,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassAscii::kind","value":"ast::ClassAsciiKind","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The kind of ASCII class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":715},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38767,"byte_end":38774,"line_start":751,"line_end":751,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassAscii::negated","value":"bool","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated\n but `[[:^alpha:]]` is.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":717},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38919,"byte_end":38924,"line_start":758,"line_end":758,"column_start":5,"column_end":10},"name":"Alnum","qualname":"::ast::ClassAsciiKind::Alnum","value":"ClassAsciiKind::Alnum","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":719},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38949,"byte_end":38954,"line_start":760,"line_end":760,"column_start":5,"column_end":10},"name":"Alpha","qualname":"::ast::ClassAsciiKind::Alpha","value":"ClassAsciiKind::Alpha","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[A-Za-z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":721},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38982,"byte_end":38987,"line_start":762,"line_end":762,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassAsciiKind::Ascii","value":"ClassAsciiKind::Ascii","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[\\x00-\\x7F]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":723},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39009,"byte_end":39014,"line_start":764,"line_end":764,"column_start":5,"column_end":10},"name":"Blank","qualname":"::ast::ClassAsciiKind::Blank","value":"ClassAsciiKind::Blank","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[ \\t]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":725},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39046,"byte_end":39051,"line_start":766,"line_end":766,"column_start":5,"column_end":10},"name":"Cntrl","qualname":"::ast::ClassAsciiKind::Cntrl","value":"ClassAsciiKind::Cntrl","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[\\x00-\\x1F\\x7F]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":727},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39073,"byte_end":39078,"line_start":768,"line_end":768,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassAsciiKind::Digit","value":"ClassAsciiKind::Digit","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[0-9]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":729},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39100,"byte_end":39105,"line_start":770,"line_end":770,"column_start":5,"column_end":10},"name":"Graph","qualname":"::ast::ClassAsciiKind::Graph","value":"ClassAsciiKind::Graph","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[!-~]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":731},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39127,"byte_end":39132,"line_start":772,"line_end":772,"column_start":5,"column_end":10},"name":"Lower","qualname":"::ast::ClassAsciiKind::Lower","value":"ClassAsciiKind::Lower","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[a-z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":733},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39154,"byte_end":39159,"line_start":774,"line_end":774,"column_start":5,"column_end":10},"name":"Print","qualname":"::ast::ClassAsciiKind::Print","value":"ClassAsciiKind::Print","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[ -~]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":735},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39191,"byte_end":39196,"line_start":776,"line_end":776,"column_start":5,"column_end":10},"name":"Punct","qualname":"::ast::ClassAsciiKind::Punct","value":"ClassAsciiKind::Punct","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[!-/:-@\\[-`{-~]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":737},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39226,"byte_end":39231,"line_start":778,"line_end":778,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassAsciiKind::Space","value":"ClassAsciiKind::Space","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[\\t\\n\\v\\f\\r ]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":739},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39253,"byte_end":39258,"line_start":780,"line_end":780,"column_start":5,"column_end":10},"name":"Upper","qualname":"::ast::ClassAsciiKind::Upper","value":"ClassAsciiKind::Upper","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[A-Z]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":741},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39287,"byte_end":39291,"line_start":782,"line_end":782,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassAsciiKind::Word","value":"ClassAsciiKind::Word","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z_]`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39319,"byte_end":39325,"line_start":784,"line_end":784,"column_start":5,"column_end":11},"name":"Xdigit","qualname":"::ast::ClassAsciiKind::Xdigit","value":"ClassAsciiKind::Xdigit","parent":{"krate":0,"index":2218},"children":[],"decl_id":null,"docs":" `[0-9A-Fa-f]`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2218},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38876,"byte_end":38890,"line_start":756,"line_end":756,"column_start":10,"column_end":24},"name":"ClassAsciiKind","qualname":"::ast::ClassAsciiKind","value":"ClassAsciiKind::{Alnum, Alpha, Ascii, Blank, Cntrl, Digit, Graph, Lower, Print, Punct, Space, Upper, Word, Xdigit}","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":727},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":743}],"decl_id":null,"docs":" The available ASCII character classes.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":38867,"byte_end":39328,"line_start":756,"line_end":785,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39696,"byte_end":39705,"line_start":795,"line_end":795,"column_start":12,"column_end":21},"name":"from_name","qualname":"<ClassAsciiKind>::from_name","value":"fn (name: &str) -> Option<ClassAsciiKind>","parent":null,"children":[],"decl_id":null,"docs":" Return the corresponding ClassAsciiKind variant for the given name.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2236},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":40431,"byte_end":40443,"line_start":819,"line_end":819,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::ast::ClassUnicode","value":"ClassUnicode { span, negated, kind }","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":749}],"decl_id":null,"docs":" A Unicode character class.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":40420,"byte_end":41130,"line_start":819,"line_end":834,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":745},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":40486,"byte_end":40490,"line_start":821,"line_end":821,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassUnicode::span","value":"ast::Span","parent":{"krate":0,"index":2236},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":747},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41047,"byte_end":41054,"line_start":831,"line_end":831,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassUnicode::negated","value":"bool","parent":{"krate":0,"index":2236},"children":[],"decl_id":null,"docs":" Whether this class is negated or not.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":749},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41105,"byte_end":41109,"line_start":833,"line_end":833,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassUnicode::kind","value":"ast::ClassUnicodeKind","parent":{"krate":0,"index":2236},"children":[],"decl_id":null,"docs":" The kind of Unicode class.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41371,"byte_end":41381,"line_start":841,"line_end":841,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<ClassUnicode>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this class has been negated.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":751},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41797,"byte_end":41806,"line_start":856,"line_end":856,"column_start":5,"column_end":14},"name":"OneLetter","qualname":"::ast::ClassUnicodeKind::OneLetter","value":"ClassUnicodeKind::OneLetter(char)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" A one letter abbreviated class, e.g., `\\pN`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":755},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41906,"byte_end":41911,"line_start":859,"line_end":859,"column_start":5,"column_end":10},"name":"Named","qualname":"::ast::ClassUnicodeKind::Named","value":"ClassUnicodeKind::Named(String)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" A binary property, general category or script. The string may be\n empty.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":759},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41974,"byte_end":41984,"line_start":861,"line_end":861,"column_start":5,"column_end":15},"name":"NamedValue","qualname":"::ast::ClassUnicodeKind::NamedValue","value":"ClassUnicodeKind::NamedValue { op, name, value }","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" A property name and an associated value.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2256},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41721,"byte_end":41737,"line_start":854,"line_end":854,"column_start":10,"column_end":26},"name":"ClassUnicodeKind","qualname":"::ast::ClassUnicodeKind","value":"ClassUnicodeKind::{OneLetter, Named, NamedValue}","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":755},{"krate":0,"index":759}],"decl_id":null,"docs":" The available forms of Unicode character classes.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41712,"byte_end":42251,"line_start":854,"line_end":869,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":767},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42450,"byte_end":42455,"line_start":875,"line_end":875,"column_start":5,"column_end":10},"name":"Equal","qualname":"::ast::ClassUnicodeOpKind::Equal","value":"ClassUnicodeOpKind::Equal","parent":{"krate":0,"index":2276},"children":[],"decl_id":null,"docs":" A property set to a specific value, e.g., `\\p{scx=Katakana}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":769},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42553,"byte_end":42558,"line_start":878,"line_end":878,"column_start":5,"column_end":10},"name":"Colon","qualname":"::ast::ClassUnicodeOpKind::Colon","value":"ClassUnicodeOpKind::Colon","parent":{"krate":0,"index":2276},"children":[],"decl_id":null,"docs":" A property set to a specific value using a colon, e.g.,\n `\\p{scx:Katakana}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":771},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42641,"byte_end":42649,"line_start":880,"line_end":880,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::ast::ClassUnicodeOpKind::NotEqual","value":"ClassUnicodeOpKind::NotEqual","parent":{"krate":0,"index":2276},"children":[],"decl_id":null,"docs":" A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2276},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42355,"byte_end":42373,"line_start":873,"line_end":873,"column_start":10,"column_end":28},"name":"ClassUnicodeOpKind","qualname":"::ast::ClassUnicodeOpKind","value":"ClassUnicodeOpKind::{Equal, Colon, NotEqual}","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771}],"decl_id":null,"docs":" The type of op used in a Unicode character class.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42346,"byte_end":42652,"line_start":873,"line_end":881,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42740,"byte_end":42748,"line_start":885,"line_end":885,"column_start":12,"column_end":20},"name":"is_equal","qualname":"<ClassUnicodeOpKind>::is_equal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the op is an equality op or not.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2294},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43007,"byte_end":43021,"line_start":895,"line_end":895,"column_start":12,"column_end":26},"name":"ClassBracketed","qualname":"::ast::ClassBracketed","value":"ClassBracketed { span, negated, kind }","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":775},{"krate":0,"index":777}],"decl_id":null,"docs":" A bracketed character class, e.g., `[a-z0-9]`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42996,"byte_end":43372,"line_start":895,"line_end":904,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":773},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43064,"byte_end":43068,"line_start":897,"line_end":897,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassBracketed::span","value":"ast::Span","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":775},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43180,"byte_end":43187,"line_start":900,"line_end":900,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassBracketed::negated","value":"bool","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" Whether this class is negated or not. e.g., `[a]` is not negated but\n `[^a]` is.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":777},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43355,"byte_end":43359,"line_start":903,"line_end":903,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassBracketed::kind","value":"ast::ClassSet","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":" The type of this set. A set is either a normal union of things, e.g.,\n `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":779},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43824,"byte_end":43828,"line_start":916,"line_end":916,"column_start":5,"column_end":9},"name":"Item","qualname":"::ast::ClassSet::Item","value":"ClassSet::Item(ClassSetItem)","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" An item, which can be a single literal, range, nested character class\n or a union of items.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":783},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43904,"byte_end":43912,"line_start":918,"line_end":918,"column_start":5,"column_end":13},"name":"BinaryOp","qualname":"::ast::ClassSet::BinaryOp","value":"ClassSet::BinaryOp(ClassSetBinaryOp)","parent":{"krate":0,"index":2314},"children":[],"decl_id":null,"docs":" A single binary operation (i.e., &&, -- or ~~).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2314},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43702,"byte_end":43710,"line_start":913,"line_end":913,"column_start":10,"column_end":18},"name":"ClassSet","qualname":"::ast::ClassSet","value":"ClassSet::{Item, BinaryOp}","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":783}],"decl_id":null,"docs":" A character class set.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43693,"byte_end":43933,"line_start":913,"line_end":919,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43996,"byte_end":44001,"line_start":923,"line_end":923,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassSet>::union","value":"fn (ast: ClassSetUnion) -> ClassSet","parent":null,"children":[],"decl_id":null,"docs":" Build a set from a union.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":44156,"byte_end":44160,"line_start":928,"line_end":928,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSet>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":787},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":44903,"byte_end":44908,"line_start":952,"line_end":952,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::ClassSetItem::Empty","value":"ClassSetItem::Empty(Span)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" An empty item.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":791},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":44946,"byte_end":44953,"line_start":954,"line_end":954,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::ClassSetItem::Literal","value":"ClassSetItem::Literal(Literal)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A single literal.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":795},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45006,"byte_end":45011,"line_start":956,"line_end":956,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::ClassSetItem::Range","value":"ClassSetItem::Range(ClassSetRange)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A range between two literals.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":799},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45100,"byte_end":45105,"line_start":958,"line_end":958,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassSetItem::Ascii","value":"ClassSetItem::Ascii(ClassAscii)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":803},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45186,"byte_end":45193,"line_start":960,"line_end":960,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::ClassSetItem::Unicode","value":"ClassSetItem::Unicode(ClassUnicode)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45265,"byte_end":45269,"line_start":962,"line_end":962,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::ClassSetItem::Perl","value":"ClassSetItem::Perl(ClassPerl)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":811},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45448,"byte_end":45457,"line_start":966,"line_end":966,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::ClassSetItem::Bracketed","value":"ClassSetItem::Bracketed(Box<ClassBracketed>)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":815},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45510,"byte_end":45515,"line_start":968,"line_end":968,"column_start":5,"column_end":10},"name":"Union","qualname":"::ast::ClassSetItem::Union","value":"ClassSetItem::Union(ClassSetUnion)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A union of items.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2334},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":44630,"byte_end":44642,"line_start":946,"line_end":946,"column_start":10,"column_end":22},"name":"ClassSetItem","qualname":"::ast::ClassSetItem","value":"ClassSetItem::{Empty, Literal, Range, Ascii, Unicode, Perl, Bracketed, Union}","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":791},{"krate":0,"index":795},{"krate":0,"index":799},{"krate":0,"index":803},{"krate":0,"index":807},{"krate":0,"index":811},{"krate":0,"index":815}],"decl_id":null,"docs":" A single component of a character class set.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":44621,"byte_end":45533,"line_start":946,"line_end":969,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45624,"byte_end":45628,"line_start":973,"line_end":973,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSetItem>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set item.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2354},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46198,"byte_end":46211,"line_start":989,"line_end":989,"column_start":12,"column_end":25},"name":"ClassSetRange","qualname":"::ast::ClassSetRange","value":"ClassSetRange { span, start, end }","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":823}],"decl_id":null,"docs":" A single character class range in a set.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46187,"byte_end":46377,"line_start":989,"line_end":996,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":819},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46254,"byte_end":46258,"line_start":991,"line_end":991,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetRange::span","value":"ast::Span","parent":{"krate":0,"index":2354},"children":[],"decl_id":null,"docs":" The span of this range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":821},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46307,"byte_end":46312,"line_start":993,"line_end":993,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::ClassSetRange::start","value":"ast::Literal","parent":{"krate":0,"index":2354},"children":[],"decl_id":null,"docs":" The start of this range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":823},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46362,"byte_end":46365,"line_start":995,"line_end":995,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::ClassSetRange::end","value":"ast::Literal","parent":{"krate":0,"index":2354},"children":[],"decl_id":null,"docs":" The end of this range.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46588,"byte_end":46596,"line_start":1003,"line_end":1003,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<ClassSetRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class range is valid.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2374},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46759,"byte_end":46772,"line_start":1010,"line_end":1010,"column_start":12,"column_end":25},"name":"ClassSetUnion","qualname":"::ast::ClassSetUnion","value":"ClassSetUnion { span, items }","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":827}],"decl_id":null,"docs":" A union of items inside a character class set.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46748,"byte_end":46976,"line_start":1010,"line_end":1016,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":825},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46874,"byte_end":46878,"line_start":1013,"line_end":1013,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetUnion::span","value":"ast::Span","parent":{"krate":0,"index":2374},"children":[],"decl_id":null,"docs":" The span of the items in this operation. e.g., the `a-z0-9` in\n `[^a-z0-9]`\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":827},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46949,"byte_end":46954,"line_start":1015,"line_end":1015,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::ClassSetUnion::items","value":"std::vec::Vec<ast::ClassSetItem>","parent":{"krate":0,"index":2374},"children":[],"decl_id":null,"docs":" The sequence of items that make up this union.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":47520,"byte_end":47524,"line_start":1029,"line_end":1029,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassSetUnion>::push","value":"fn (&mut self, item: ClassSetItem) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a new item in this union.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48039,"byte_end":48048,"line_start":1043,"line_end":1043,"column_start":12,"column_end":21},"name":"into_item","qualname":"<ClassSetUnion>::into_item","value":"fn (mut self) -> ClassSetItem","parent":null,"children":[],"decl_id":null,"docs":" Return this union as a character class set item.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2394},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48361,"byte_end":48377,"line_start":1054,"line_end":1054,"column_start":12,"column_end":28},"name":"ClassSetBinaryOp","qualname":"::ast::ClassSetBinaryOp","value":"ClassSetBinaryOp { span, kind, lhs, rhs }","parent":null,"children":[{"krate":0,"index":829},{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":835}],"decl_id":null,"docs":" A Unicode character class set operation.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48350,"byte_end":48700,"line_start":1054,"line_end":1063,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":829},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48464,"byte_end":48468,"line_start":1056,"line_end":1056,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetBinaryOp::span","value":"ast::Span","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":831},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48524,"byte_end":48528,"line_start":1058,"line_end":1058,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassSetBinaryOp::kind","value":"ast::ClassSetBinaryOpKind","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" The type of this set operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":833},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48605,"byte_end":48608,"line_start":1060,"line_end":1060,"column_start":9,"column_end":12},"name":"lhs","qualname":"::ast::ClassSetBinaryOp::lhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" The left hand side of the operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":835},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48679,"byte_end":48682,"line_start":1062,"line_end":1062,"column_start":9,"column_end":12},"name":"rhs","qualname":"::ast::ClassSetBinaryOp::rhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2394},"children":[],"decl_id":null,"docs":" The right hand side of the operation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":837},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49082,"byte_end":49094,"line_start":1073,"line_end":1073,"column_start":5,"column_end":17},"name":"Intersection","qualname":"::ast::ClassSetBinaryOpKind::Intersection","value":"ClassSetBinaryOpKind::Intersection","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" The intersection of two sets, e.g., `\\pN&&[a-z]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":839},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49156,"byte_end":49166,"line_start":1075,"line_end":1075,"column_start":5,"column_end":15},"name":"Difference","qualname":"::ast::ClassSetBinaryOpKind::Difference","value":"ClassSetBinaryOpKind::Difference","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" The difference of two sets, e.g., `\\pN--[0-9]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":841},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49344,"byte_end":49363,"line_start":1079,"line_end":1079,"column_start":5,"column_end":24},"name":"SymmetricDifference","qualname":"::ast::ClassSetBinaryOpKind::SymmetricDifference","value":"ClassSetBinaryOpKind::SymmetricDifference","parent":{"krate":0,"index":2414},"children":[],"decl_id":null,"docs":" The symmetric difference of two sets. The symmetric difference is the\n set of elements belonging to one but not both sets.\n e.g., `[\\pL~~[:ascii:]]`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2414},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48997,"byte_end":49017,"line_start":1071,"line_end":1071,"column_start":10,"column_end":30},"name":"ClassSetBinaryOpKind","qualname":"::ast::ClassSetBinaryOpKind","value":"ClassSetBinaryOpKind::{Intersection, Difference, SymmetricDifference}","parent":null,"children":[{"krate":0,"index":837},{"krate":0,"index":839},{"krate":0,"index":841}],"decl_id":null,"docs":" The type of a Unicode character class set operation.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48988,"byte_end":49366,"line_start":1071,"line_end":1080,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":48988,"byte_end":49366,"line_start":1071,"line_end":1080,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2434},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49453,"byte_end":49462,"line_start":1084,"line_end":1084,"column_start":12,"column_end":21},"name":"Assertion","qualname":"::ast::Assertion","value":"Assertion { span, kind }","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":845}],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49442,"byte_end":49598,"line_start":1084,"line_end":1089,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":843},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49509,"byte_end":49513,"line_start":1086,"line_end":1086,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Assertion::span","value":"ast::Span","parent":{"krate":0,"index":2434},"children":[],"decl_id":null,"docs":" The span of this assertion.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":845},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49576,"byte_end":49580,"line_start":1088,"line_end":1088,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Assertion::kind","value":"ast::AssertionKind","parent":{"krate":0,"index":2434},"children":[],"decl_id":null,"docs":" The assertion kind, e.g., `\\b` or `^`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":847},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49703,"byte_end":49712,"line_start":1095,"line_end":1095,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::ast::AssertionKind::StartLine","value":"AssertionKind::StartLine","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":" `^`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":849},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49730,"byte_end":49737,"line_start":1097,"line_end":1097,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::ast::AssertionKind::EndLine","value":"AssertionKind::EndLine","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":" `$`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":851},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49756,"byte_end":49765,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14},"name":"StartText","qualname":"::ast::AssertionKind::StartText","value":"AssertionKind::StartText","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":" `\\A`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":853},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49784,"byte_end":49791,"line_start":1101,"line_end":1101,"column_start":5,"column_end":12},"name":"EndText","qualname":"::ast::AssertionKind::EndText","value":"AssertionKind::EndText","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":" `\\z`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":855},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49810,"byte_end":49822,"line_start":1103,"line_end":1103,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::ast::AssertionKind::WordBoundary","value":"AssertionKind::WordBoundary","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":" `\\b`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":857},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49841,"byte_end":49856,"line_start":1105,"line_end":1105,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::ast::AssertionKind::NotWordBoundary","value":"AssertionKind::NotWordBoundary","parent":{"krate":0,"index":2454},"children":[],"decl_id":null,"docs":" `\\B`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2454},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49671,"byte_end":49684,"line_start":1093,"line_end":1093,"column_start":10,"column_end":23},"name":"AssertionKind","qualname":"::ast::AssertionKind","value":"AssertionKind::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary}","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":851},{"krate":0,"index":853},{"krate":0,"index":855},{"krate":0,"index":857}],"decl_id":null,"docs":" An assertion kind.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49662,"byte_end":49859,"line_start":1093,"line_end":1106,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2472},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49971,"byte_end":49981,"line_start":1110,"line_end":1110,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::ast::Repetition","value":"Repetition { span, op, greedy, ast }","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865}],"decl_id":null,"docs":" A repetition operation applied to a regular expression.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":49960,"byte_end":50251,"line_start":1110,"line_end":1119,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":859},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50028,"byte_end":50032,"line_start":1112,"line_end":1112,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Repetition::span","value":"ast::Span","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":" The span of this operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":861},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50078,"byte_end":50080,"line_start":1114,"line_end":1114,"column_start":9,"column_end":11},"name":"op","qualname":"::ast::Repetition::op","value":"ast::RepetitionOp","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":" The actual operation.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":863},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50164,"byte_end":50170,"line_start":1116,"line_end":1116,"column_start":9,"column_end":15},"name":"greedy","qualname":"::ast::Repetition::greedy","value":"bool","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":" Whether this operation was applied greedily or not.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":865},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50235,"byte_end":50238,"line_start":1118,"line_end":1118,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Repetition::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2472},"children":[],"decl_id":null,"docs":" The regular expression under repetition.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2492},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50339,"byte_end":50351,"line_start":1123,"line_end":1123,"column_start":12,"column_end":24},"name":"RepetitionOp","qualname":"::ast::RepetitionOp","value":"RepetitionOp { span, kind }","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":869}],"decl_id":null,"docs":" The repetition operator itself.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50328,"byte_end":50528,"line_start":1123,"line_end":1129,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":867},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50454,"byte_end":50458,"line_start":1126,"line_end":1126,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::RepetitionOp::span","value":"ast::Span","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" The span of this operator. This includes things like `+`, `*?` and\n `{m,n}`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":869},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50505,"byte_end":50509,"line_start":1128,"line_end":1128,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::RepetitionOp::kind","value":"ast::RepetitionKind","parent":{"krate":0,"index":2492},"children":[],"decl_id":null,"docs":" The type of operation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":871},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50650,"byte_end":50659,"line_start":1135,"line_end":1135,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::ast::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":2512},"children":[],"decl_id":null,"docs":" `?`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":873},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50677,"byte_end":50687,"line_start":1137,"line_end":1137,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::ast::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":2512},"children":[],"decl_id":null,"docs":" `*`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":875},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50705,"byte_end":50714,"line_start":1139,"line_end":1139,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::ast::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":2512},"children":[],"decl_id":null,"docs":" `+`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":877},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50736,"byte_end":50741,"line_start":1141,"line_end":1141,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":2512},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2512},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50617,"byte_end":50631,"line_start":1133,"line_end":1133,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::ast::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":873},{"krate":0,"index":875},{"krate":0,"index":877}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50608,"byte_end":50761,"line_start":1133,"line_end":1142,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":881},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50880,"byte_end":50887,"line_start":1148,"line_end":1148,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::ast::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":2532},"children":[],"decl_id":null,"docs":" `{m}`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":885},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50913,"byte_end":50920,"line_start":1150,"line_end":1150,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::ast::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":2532},"children":[],"decl_id":null,"docs":" `{m,}`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":889},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50947,"byte_end":50954,"line_start":1152,"line_end":1152,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::ast::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":2532},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2532},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50844,"byte_end":50859,"line_start":1146,"line_end":1146,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::ast::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":885},{"krate":0,"index":889}],"decl_id":null,"docs":" A range repetition operator.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50835,"byte_end":50967,"line_start":1146,"line_end":1153,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51204,"byte_end":51212,"line_start":1160,"line_end":1160,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<RepetitionRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition range is valid.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2552},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51682,"byte_end":51687,"line_start":1175,"line_end":1175,"column_start":12,"column_end":17},"name":"Group","qualname":"::ast::Group","value":"Group { span, kind, ast }","parent":null,"children":[{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":899}],"decl_id":null,"docs":" A grouped regular expression.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51671,"byte_end":51869,"line_start":1175,"line_end":1182,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":895},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51730,"byte_end":51734,"line_start":1177,"line_end":1177,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Group::span","value":"ast::Span","parent":{"krate":0,"index":2552},"children":[],"decl_id":null,"docs":" The span of this group.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":897},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51782,"byte_end":51786,"line_start":1179,"line_end":1179,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Group::kind","value":"ast::GroupKind","parent":{"krate":0,"index":2552},"children":[],"decl_id":null,"docs":" The kind of this group.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":899},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51853,"byte_end":51856,"line_start":1181,"line_end":1181,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Group::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2552},"children":[],"decl_id":null,"docs":" The regular expression in this group.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":52027,"byte_end":52032,"line_start":1187,"line_end":1187,"column_start":12,"column_end":17},"name":"flags","qualname":"<Group>::flags","value":"fn (&self) -> Option<&Flags>","parent":null,"children":[],"decl_id":null,"docs":" If this group is non-capturing, then this returns the (possibly empty)\n set of flags. Otherwise, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":52261,"byte_end":52273,"line_start":1195,"line_end":1195,"column_start":12,"column_end":24},"name":"is_capturing","qualname":"<Group>::is_capturing","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this group is capturing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":52635,"byte_end":52648,"line_start":1205,"line_end":1205,"column_start":12,"column_end":25},"name":"capture_index","qualname":"<Group>::capture_index","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture index of this group, if this is a capturing group.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":901},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":52980,"byte_end":52992,"line_start":1218,"line_end":1218,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::ast::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" `(a)`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":905},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53025,"byte_end":53036,"line_start":1220,"line_end":1220,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::ast::GroupKind::CaptureName","value":"GroupKind::CaptureName(CaptureName)","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" `(?P<name>a)`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":909},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53084,"byte_end":53096,"line_start":1222,"line_end":1222,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::ast::GroupKind::NonCapturing","value":"GroupKind::NonCapturing(Flags)","parent":{"krate":0,"index":2572},"children":[],"decl_id":null,"docs":" `(?:a)` and `(?i:a)`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2572},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":52950,"byte_end":52959,"line_start":1216,"line_end":1216,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::ast::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":905},{"krate":0,"index":909}],"decl_id":null,"docs":" The kind of a group.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":52941,"byte_end":53106,"line_start":1216,"line_end":1223,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2592},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53280,"byte_end":53291,"line_start":1230,"line_end":1230,"column_start":12,"column_end":23},"name":"CaptureName","qualname":"::ast::CaptureName","value":"CaptureName { span, name, index }","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":917}],"decl_id":null,"docs":" A capture name.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53269,"byte_end":53449,"line_start":1230,"line_end":1237,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":913},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53341,"byte_end":53345,"line_start":1232,"line_end":1232,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::CaptureName::span","value":"ast::Span","parent":{"krate":0,"index":2592},"children":[],"decl_id":null,"docs":" The span of this capture name.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":915},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53387,"byte_end":53391,"line_start":1234,"line_end":1234,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::CaptureName::name","value":"std::string::String","parent":{"krate":0,"index":2592},"children":[],"decl_id":null,"docs":" The capture name.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":917},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53436,"byte_end":53441,"line_start":1236,"line_end":1236,"column_start":9,"column_end":14},"name":"index","qualname":"::ast::CaptureName::index","value":"u32","parent":{"krate":0,"index":2592},"children":[],"decl_id":null,"docs":" The capture index.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2612},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53578,"byte_end":53586,"line_start":1241,"line_end":1241,"column_start":12,"column_end":20},"name":"SetFlags","qualname":"::ast::SetFlags","value":"SetFlags { span, flags }","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":921}],"decl_id":null,"docs":" A group of flags that is not applied to a particular regular expression.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53567,"byte_end":53739,"line_start":1241,"line_end":1246,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":919},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53666,"byte_end":53670,"line_start":1243,"line_end":1243,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::SetFlags::span","value":"ast::Span","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" The span of these flags, including the grouping parentheses.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":921},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53724,"byte_end":53729,"line_start":1245,"line_end":1245,"column_start":9,"column_end":14},"name":"flags","qualname":"::ast::SetFlags::flags","value":"ast::Flags","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":" The actual sequence of flags.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2632},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53894,"byte_end":53899,"line_start":1252,"line_end":1252,"column_start":12,"column_end":17},"name":"Flags","qualname":"::ast::Flags","value":"Flags { span, items }","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":925}],"decl_id":null,"docs":" A group of flags.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53883,"byte_end":54088,"line_start":1252,"line_end":1258,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":923},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":53951,"byte_end":53955,"line_start":1254,"line_end":1254,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Flags::span","value":"ast::Span","parent":{"krate":0,"index":2632},"children":[],"decl_id":null,"docs":" The span of this group of flags.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":925},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":54064,"byte_end":54069,"line_start":1257,"line_end":1257,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::Flags::items","value":"std::vec::Vec<ast::FlagsItem>","parent":{"krate":0,"index":2632},"children":[],"decl_id":null,"docs":" A sequence of flag items. Each item is either a flag or a negation\n operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":54359,"byte_end":54367,"line_start":1266,"line_end":1266,"column_start":12,"column_end":20},"name":"add_item","qualname":"<Flags>::add_item","value":"fn (&mut self, item: FlagsItem) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Add the given item to this sequence of flags.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":54939,"byte_end":54949,"line_start":1285,"line_end":1285,"column_start":12,"column_end":22},"name":"flag_state","qualname":"<Flags>::flag_state","value":"fn (&self, flag: Flag) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the state of the given flag in this set.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2652},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55467,"byte_end":55476,"line_start":1304,"line_end":1304,"column_start":12,"column_end":21},"name":"FlagsItem","qualname":"::ast::FlagsItem","value":"FlagsItem { span, kind }","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":929}],"decl_id":null,"docs":" A single item in a group of flags.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55456,"byte_end":55591,"line_start":1304,"line_end":1309,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":927},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55518,"byte_end":55522,"line_start":1306,"line_end":1306,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::FlagsItem::span","value":"ast::Span","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" The span of this item.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":929},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55569,"byte_end":55573,"line_start":1308,"line_end":1308,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::FlagsItem::kind","value":"ast::FlagsItemKind","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" The kind of this item.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":931},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55798,"byte_end":55806,"line_start":1316,"line_end":1316,"column_start":5,"column_end":13},"name":"Negation","qualname":"::ast::FlagsItemKind::Negation","value":"FlagsItemKind::Negation","parent":{"krate":0,"index":2672},"children":[],"decl_id":null,"docs":" A negation operator applied to all subsequent flags in the enclosing\n group.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":933},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55846,"byte_end":55850,"line_start":1318,"line_end":1318,"column_start":5,"column_end":9},"name":"Flag","qualname":"::ast::FlagsItemKind::Flag","value":"FlagsItemKind::Flag(Flag)","parent":{"krate":0,"index":2672},"children":[],"decl_id":null,"docs":" A single flag in a group.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2672},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55686,"byte_end":55699,"line_start":1313,"line_end":1313,"column_start":10,"column_end":23},"name":"FlagsItemKind","qualname":"::ast::FlagsItemKind","value":"FlagsItemKind::{Negation, Flag}","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":933}],"decl_id":null,"docs":" The kind of an item in a group of flags.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55677,"byte_end":55859,"line_start":1313,"line_end":1319,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55963,"byte_end":55974,"line_start":1323,"line_end":1323,"column_start":12,"column_end":23},"name":"is_negation","qualname":"<FlagsItemKind>::is_negation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this item is a negation operator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":937},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56198,"byte_end":56213,"line_start":1335,"line_end":1335,"column_start":5,"column_end":20},"name":"CaseInsensitive","qualname":"::ast::Flag::CaseInsensitive","value":"Flag::CaseInsensitive","parent":{"krate":0,"index":2692},"children":[],"decl_id":null,"docs":" `i`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":939},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56231,"byte_end":56240,"line_start":1337,"line_end":1337,"column_start":5,"column_end":14},"name":"MultiLine","qualname":"::ast::Flag::MultiLine","value":"Flag::MultiLine","parent":{"krate":0,"index":2692},"children":[],"decl_id":null,"docs":" `m`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":941},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56258,"byte_end":56275,"line_start":1339,"line_end":1339,"column_start":5,"column_end":22},"name":"DotMatchesNewLine","qualname":"::ast::Flag::DotMatchesNewLine","value":"Flag::DotMatchesNewLine","parent":{"krate":0,"index":2692},"children":[],"decl_id":null,"docs":" `s`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":943},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56293,"byte_end":56302,"line_start":1341,"line_end":1341,"column_start":5,"column_end":14},"name":"SwapGreed","qualname":"::ast::Flag::SwapGreed","value":"Flag::SwapGreed","parent":{"krate":0,"index":2692},"children":[],"decl_id":null,"docs":" `U`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":945},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56320,"byte_end":56327,"line_start":1343,"line_end":1343,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Flag::Unicode","value":"Flag::Unicode","parent":{"krate":0,"index":2692},"children":[],"decl_id":null,"docs":" `u`\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":947},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56345,"byte_end":56361,"line_start":1345,"line_end":1345,"column_start":5,"column_end":21},"name":"IgnoreWhitespace","qualname":"::ast::Flag::IgnoreWhitespace","value":"Flag::IgnoreWhitespace","parent":{"krate":0,"index":2692},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2692},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56175,"byte_end":56179,"line_start":1333,"line_end":1333,"column_start":10,"column_end":14},"name":"Flag","qualname":"::ast::Flag","value":"Flag::{CaseInsensitive, MultiLine, DotMatchesNewLine, SwapGreed, Unicode, IgnoreWhitespace}","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":939},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947}],"decl_id":null,"docs":" A single flag.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56166,"byte_end":56364,"line_start":1333,"line_end":1346,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56166,"byte_end":56364,"line_start":1333,"line_end":1346,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":662},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":302296,"byte_end":302302,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for dealing with errors returned by this crate.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":977},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":302574,"byte_end":302579,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Parse","qualname":"::error::Error::Parse","value":"Error::Parse(ast::Error)","parent":{"krate":0,"index":2732},"children":[],"decl_id":null,"docs":" An error that occurred while translating concrete syntax into abstract\n syntax (AST).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":981},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":302723,"byte_end":302732,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"Translate","qualname":"::error::Error::Translate","value":"Error::Translate(hir::Error)","parent":{"krate":0,"index":2732},"children":[],"decl_id":null,"docs":" An error that occurred while translating abstract syntax into a high\n level intermediate representation (HIR).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":985},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303024,"byte_end":303039,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":2732},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2732},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":302461,"byte_end":302466,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Parse, Translate, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":981},{"krate":0,"index":985}],"decl_id":null,"docs":" This error type encompasses any error that can be returned by this crate.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":302452,"byte_end":303042,"line_start":14,"line_end":28,"column_start":1,"column_end":2}}]},{"kind":"Mod","id":{"krate":0,"index":710},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hir","qualname":"::hir","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/hir/mod.rs","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":856},{"krate":0,"index":1018},{"krate":0,"index":1076},{"krate":0,"index":1250},{"krate":0,"index":2892},{"krate":0,"index":2908},{"krate":0,"index":2904},{"krate":0,"index":2900},{"krate":0,"index":2894},{"krate":0,"index":1296},{"krate":0,"index":2912},{"krate":0,"index":2926},{"krate":0,"index":2922},{"krate":0,"index":2918},{"krate":0,"index":2914},{"krate":0,"index":1304},{"krate":0,"index":1310},{"krate":0,"index":1314},{"krate":0,"index":1318},{"krate":0,"index":2930},{"krate":0,"index":2946},{"krate":0,"index":2942},{"krate":0,"index":2938},{"krate":0,"index":2932},{"krate":0,"index":2950},{"krate":0,"index":2966},{"krate":0,"index":2962},{"krate":0,"index":2958},{"krate":0,"index":2952},{"krate":0,"index":1322},{"krate":0,"index":1374},{"krate":0,"index":1380},{"krate":0,"index":2970},{"krate":0,"index":2986},{"krate":0,"index":2982},{"krate":0,"index":2978},{"krate":0,"index":2972},{"krate":0,"index":1386},{"krate":0,"index":2990},{"krate":0,"index":3006},{"krate":0,"index":3002},{"krate":0,"index":2998},{"krate":0,"index":2992},{"krate":0,"index":1390},{"krate":0,"index":3010},{"krate":0,"index":3026},{"krate":0,"index":3022},{"krate":0,"index":3018},{"krate":0,"index":3012},{"krate":0,"index":1398},{"krate":0,"index":3030},{"krate":0,"index":3032},{"krate":0,"index":1424},{"krate":0,"index":3036},{"krate":0,"index":3070},{"krate":0,"index":3068},{"krate":0,"index":3064},{"krate":0,"index":3060},{"krate":0,"index":3054},{"krate":0,"index":3042},{"krate":0,"index":3038},{"krate":0,"index":1430},{"krate":0,"index":1434},{"krate":0,"index":1448},{"krate":0,"index":3074},{"krate":0,"index":3090},{"krate":0,"index":3086},{"krate":0,"index":3082},{"krate":0,"index":3076},{"krate":0,"index":1456},{"krate":0,"index":3094},{"krate":0,"index":3096},{"krate":0,"index":1482},{"krate":0,"index":3100},{"krate":0,"index":3134},{"krate":0,"index":3132},{"krate":0,"index":3128},{"krate":0,"index":3124},{"krate":0,"index":3118},{"krate":0,"index":3106},{"krate":0,"index":3102},{"krate":0,"index":1488},{"krate":0,"index":1502},{"krate":0,"index":1510},{"krate":0,"index":3138},{"krate":0,"index":3152},{"krate":0,"index":3148},{"krate":0,"index":3144},{"krate":0,"index":3140},{"krate":0,"index":3156},{"krate":0,"index":3170},{"krate":0,"index":3166},{"krate":0,"index":3162},{"krate":0,"index":3158},{"krate":0,"index":1514},{"krate":0,"index":3174},{"krate":0,"index":3190},{"krate":0,"index":3186},{"krate":0,"index":3182},{"krate":0,"index":3176},{"krate":0,"index":3194},{"krate":0,"index":3210},{"krate":0,"index":3206},{"krate":0,"index":3202},{"krate":0,"index":3196},{"krate":0,"index":3214},{"krate":0,"index":3230},{"krate":0,"index":3226},{"krate":0,"index":3222},{"krate":0,"index":3216},{"krate":0,"index":1518},{"krate":0,"index":3234},{"krate":0,"index":3250},{"krate":0,"index":3246},{"krate":0,"index":3242},{"krate":0,"index":3236},{"krate":0,"index":3254},{"krate":0,"index":3270},{"krate":0,"index":3266},{"krate":0,"index":3262},{"krate":0,"index":3256},{"krate":0,"index":1522},{"krate":0,"index":3274},{"krate":0,"index":3290},{"krate":0,"index":3286},{"krate":0,"index":3282},{"krate":0,"index":3276},{"krate":0,"index":1528},{"krate":0,"index":1530}],"decl_id":null,"docs":"Defines a high-level intermediate representation for regular expressions.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":792},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408394,"byte_end":408399,"line_start":338,"line_end":338,"column_start":10,"column_end":15},"name":"Bound","qualname":"::hir::interval::Interval::Bound","value":"type Bound: Bound;","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":856},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"literal","qualname":"::hir::literal","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/hir/literal/mod.rs","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":2784},{"krate":0,"index":2796},{"krate":0,"index":2792},{"krate":0,"index":2786},{"krate":0,"index":2800},{"krate":0,"index":2810},{"krate":0,"index":2806},{"krate":0,"index":2802},{"krate":0,"index":876},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":968},{"krate":0,"index":978},{"krate":0,"index":982},{"krate":0,"index":986},{"krate":0,"index":990},{"krate":0,"index":994},{"krate":0,"index":1000},{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1014},{"krate":0,"index":1016}],"decl_id":null,"docs":"Provides routines for extracting literal prefixes and suffixes from an `Hir`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2784},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":415581,"byte_end":415589,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"Literals","qualname":"::hir::literal::Literals","value":"Literals {  }","parent":null,"children":[{"krate":0,"index":1027},{"krate":0,"index":1029},{"krate":0,"index":1031}],"decl_id":null,"docs":" A set of literal byte strings extracted from a regular expression.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":415570,"byte_end":415664,"line_start":35,"line_end":39,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2800},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":415903,"byte_end":415910,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"Literal","qualname":"::hir::literal::Literal","value":"Literal {  }","parent":null,"children":[{"krate":0,"index":1033},{"krate":0,"index":1035}],"decl_id":null,"docs":" A single member of a set of literals extracted from a regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":416040,"byte_end":416045,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literals>::empty","value":"fn () -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using default limits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":416222,"byte_end":416230,"line_start":58,"line_end":58,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<Literals>::prefixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal prefixes extracted from the given `Hir`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":416439,"byte_end":416447,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<Literals>::suffixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal suffixes extracted from the given `Hir`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":416645,"byte_end":416655,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"limit_size","qualname":"<Literals>::limit_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the approximate size limit (in bytes) of this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":417040,"byte_end":417054,"line_start":83,"line_end":83,"column_start":12,"column_end":26},"name":"set_limit_size","qualname":"<Literals>::set_limit_size","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Set the approximate size limit (in bytes) of this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":417218,"byte_end":417229,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"limit_class","qualname":"<Literals>::limit_class","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the character class size limit for this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":417783,"byte_end":417798,"line_start":103,"line_end":103,"column_start":12,"column_end":27},"name":"set_limit_class","qualname":"<Literals>::set_limit_class","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Limits the size of character(or byte) classes considered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":417980,"byte_end":417988,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"literals","qualname":"<Literals>::literals","value":"fn (&self) -> &[Literal]","parent":null,"children":[],"decl_id":null,"docs":" Returns the set of literals as a slice. Its order is unspecified.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":418167,"byte_end":418174,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"min_len","qualname":"<Literals>::min_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the smallest literal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":418539,"byte_end":418551,"line_start":129,"line_end":129,"column_start":12,"column_end":24},"name":"all_complete","qualname":"<Literals>::all_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members in this set are complete.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":418718,"byte_end":418730,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"any_complete","qualname":"<Literals>::any_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any member in this set is complete.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":418876,"byte_end":418890,"line_start":139,"line_end":139,"column_start":12,"column_end":26},"name":"contains_empty","qualname":"<Literals>::contains_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set contains an empty literal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":419054,"byte_end":419062,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Literals>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set is empty or if all of its members is empty.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":419242,"byte_end":419250,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"to_empty","qualname":"<Literals>::to_empty","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using this set's limits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":419495,"byte_end":419516,"line_start":156,"line_end":156,"column_start":12,"column_end":33},"name":"longest_common_prefix","qualname":"<Literals>::longest_common_prefix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common prefix of all members in this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":419970,"byte_end":419991,"line_start":172,"line_end":172,"column_start":12,"column_end":33},"name":"longest_common_suffix","qualname":"<Literals>::longest_common_suffix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common suffix of all members in this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":420824,"byte_end":420835,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"trim_suffix","qualname":"<Literals>::trim_suffix","value":"fn (&self, num_bytes: usize) -> Option<Literals>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of literals with the given number of bytes trimmed\n from the suffix of each literal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":421732,"byte_end":421752,"line_start":224,"line_end":224,"column_start":12,"column_end":32},"name":"unambiguous_prefixes","qualname":"<Literals>::unambiguous_prefixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of prefixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":424321,"byte_end":424341,"line_start":291,"line_end":291,"column_start":12,"column_end":32},"name":"unambiguous_suffixes","qualname":"<Literals>::unambiguous_suffixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of suffixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":425032,"byte_end":425046,"line_start":309,"line_end":309,"column_start":12,"column_end":26},"name":"union_prefixes","qualname":"<Literals>::union_prefixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the prefixes from the given expression to this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":425703,"byte_end":425717,"line_start":324,"line_end":324,"column_start":12,"column_end":26},"name":"union_suffixes","qualname":"<Literals>::union_suffixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the suffixes from the given expression to this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":426167,"byte_end":426172,"line_start":336,"line_end":336,"column_start":12,"column_end":17},"name":"union","qualname":"<Literals>::union","value":"fn (&mut self, lits: Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions this set with another set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":426808,"byte_end":426821,"line_start":355,"line_end":355,"column_start":12,"column_end":25},"name":"cross_product","qualname":"<Literals>::cross_product","value":"fn (&mut self, lits: &Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends this set with another set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":428555,"byte_end":428564,"line_start":404,"line_end":404,"column_start":12,"column_end":21},"name":"cross_add","qualname":"<Literals>::cross_add","value":"fn (&mut self, bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the bytes given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":429819,"byte_end":429822,"line_start":442,"line_end":442,"column_start":12,"column_end":15},"name":"add","qualname":"<Literals>::add","value":"fn (&mut self, lit: Literal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds the given literal to this set.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":430160,"byte_end":430174,"line_start":453,"line_end":453,"column_start":12,"column_end":26},"name":"add_char_class","qualname":"<Literals>::add_char_class","value":"fn (&mut self, cls: &hir::ClassUnicode) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the character class given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":431602,"byte_end":431616,"line_start":498,"line_end":498,"column_start":12,"column_end":26},"name":"add_byte_class","qualname":"<Literals>::add_byte_class","value":"fn (&mut self, cls: &hir::ClassBytes) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the byte class given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":432312,"byte_end":432315,"line_start":520,"line_end":520,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literals>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts every member of this set. When a member is cut, it can never\n be extended.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":432455,"byte_end":432462,"line_start":527,"line_end":527,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Literals>::reverse","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses all members in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":432607,"byte_end":432612,"line_start":534,"line_end":534,"column_start":12,"column_end":17},"name":"clear","qualname":"<Literals>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears this set of all members.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443009,"byte_end":443012,"line_start":852,"line_end":852,"column_start":12,"column_end":15},"name":"new","qualname":"<Literal>::new","value":"fn (bytes: Vec<u8>) -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete literal with the bytes given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443147,"byte_end":443152,"line_start":857,"line_end":857,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literal>::empty","value":"fn () -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete empty literal.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443276,"byte_end":443282,"line_start":862,"line_end":862,"column_start":12,"column_end":18},"name":"is_cut","qualname":"<Literal>::is_cut","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this literal was \"cut.\"\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443362,"byte_end":443365,"line_start":867,"line_end":867,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literal>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts this literal.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1018},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::hir::print","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/hir/print.rs","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1028},{"krate":0,"index":1036},{"krate":0,"index":2814},{"krate":0,"index":2820},{"krate":0,"index":2816},{"krate":0,"index":1038},{"krate":0,"index":1042},{"krate":0,"index":2824},{"krate":0,"index":2826},{"krate":0,"index":1048},{"krate":0,"index":2830},{"krate":0,"index":2832},{"krate":0,"index":1054},{"krate":0,"index":1068}],"decl_id":null,"docs":"This module provides a regular expression printer for `Hir`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2824},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":471628,"byte_end":471635,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"Printer","qualname":"::hir::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":1039}],"decl_id":null,"docs":" A printer for a regular expression's high-level intermediate\n representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":471712,"byte_end":471715,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":472062,"byte_end":472067,"line_start":67,"line_end":67,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, hir: &Hir, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1076},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"translate","qualname":"::hir::translate","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/hir/translate.rs","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1096},{"krate":0,"index":1106},{"krate":0,"index":1112},{"krate":0,"index":2836},{"krate":0,"index":2842},{"krate":0,"index":2838},{"krate":0,"index":1114},{"krate":0,"index":1118},{"krate":0,"index":2846},{"krate":0,"index":2852},{"krate":0,"index":2848},{"krate":0,"index":1136},{"krate":0,"index":2856},{"krate":0,"index":2862},{"krate":0,"index":2858},{"krate":0,"index":1142},{"krate":0,"index":1152},{"krate":0,"index":2866},{"krate":0,"index":2872},{"krate":0,"index":2868},{"krate":0,"index":1176},{"krate":0,"index":2876},{"krate":0,"index":2888},{"krate":0,"index":2886},{"krate":0,"index":2882},{"krate":0,"index":2878},{"krate":0,"index":1228},{"krate":0,"index":1244},{"krate":0,"index":1246}],"decl_id":null,"docs":"Defines a translator that converts an `Ast` to an `Hir`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2836},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":482111,"byte_end":482128,"line_start":16,"line_end":16,"column_start":12,"column_end":29},"name":"TranslatorBuilder","qualname":"::hir::translate::TranslatorBuilder","value":"TranslatorBuilder {  }","parent":null,"children":[{"krate":0,"index":1053},{"krate":0,"index":1055}],"decl_id":null,"docs":" A builder for constructing an AST->HIR translator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":482408,"byte_end":482411,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<TranslatorBuilder>::new","value":"fn () -> TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator builder with a default c onfiguration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":482629,"byte_end":482634,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"build","qualname":"<TranslatorBuilder>::build","value":"fn (&self) -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Build a translator using the current configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":483497,"byte_end":483515,"line_start":56,"line_end":56,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<TranslatorBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, translation will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":483706,"byte_end":483722,"line_start":62,"line_end":62,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<TranslatorBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag (`i`) by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":483952,"byte_end":483962,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<TranslatorBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag (`m`) by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":484202,"byte_end":484222,"line_start":75,"line_end":75,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<TranslatorBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag (`s`) by\n default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":484472,"byte_end":484482,"line_start":84,"line_end":84,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<TranslatorBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag (`U`) by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":484694,"byte_end":484701,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"unicode","qualname":"<TranslatorBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2846},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":485199,"byte_end":485209,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"Translator","qualname":"::hir::translate::Translator","value":"Translator {  }","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1061}],"decl_id":null,"docs":" A translator maps abstract syntax to a high level intermediate\n representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":485551,"byte_end":485554,"line_start":116,"line_end":116,"column_start":12,"column_end":15},"name":"new","qualname":"<Translator>::new","value":"fn () -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator using the default configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1140},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":486081,"byte_end":486090,"line_start":129,"line_end":129,"column_start":12,"column_end":21},"name":"translate","qualname":"<Translator>::translate","value":"fn (&mut self, pattern: &str, ast: &Ast) -> Result<Hir>","parent":null,"children":[],"decl_id":null,"docs":" Translate the given abstract syntax tree (AST) into a high level\n intermediate representation (HIR).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1260},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":589200,"byte_end":589207,"line_start":13,"line_end":13,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::hir::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1270},{"krate":0,"index":1272},{"krate":0,"index":1274}],"decl_id":null,"docs":" A trait for visiting the high-level IR (HIR) in depth first order.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1262},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":589258,"byte_end":589264,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::hir::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" The result of visiting an HIR.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1264},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":589327,"byte_end":589330,"line_start":17,"line_end":17,"column_start":10,"column_end":13},"name":"Err","qualname":"::hir::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" An error that visiting an HIR might return.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":589475,"byte_end":589481,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"finish","qualname":"::hir::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the HIR or an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":589601,"byte_end":589606,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"start","qualname":"::hir::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the HIR.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":589721,"byte_end":589730,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::hir::visitor::Visitor::visit_pre","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` before descending into child `Hir`\n nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":589907,"byte_end":589917,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::hir::visitor::Visitor::visit_post","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` after descending all of its child\n `Hir` nodes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":590066,"byte_end":590086,"line_start":39,"line_end":39,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::hir::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":1260},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an alternation.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1276},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":590896,"byte_end":590901,"line_start":59,"line_end":59,"column_start":8,"column_end":13},"name":"visit","qualname":"::hir::visitor::visit","value":"fn <V> (hir: &Hir, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2892},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313569,"byte_end":313574,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"Error","qualname":"::hir::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1111},{"krate":0,"index":1113}],"decl_id":null,"docs":" An error that can occur while translating an `Ast` to a `Hir`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313558,"byte_end":313879,"line_start":26,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313944,"byte_end":313948,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":314162,"byte_end":314169,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":314281,"byte_end":314285,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1115},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":314609,"byte_end":314626,"line_start":60,"line_end":60,"column_start":5,"column_end":22},"name":"UnicodeNotAllowed","qualname":"::hir::ErrorKind::UnicodeNotAllowed","value":"ErrorKind::UnicodeNotAllowed","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" This error occurs when a Unicode feature is used when Unicode\n support is disabled. For example `(?-u:\\pL)` would trigger this error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1117},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":314782,"byte_end":314793,"line_start":63,"line_end":63,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::hir::ErrorKind::InvalidUtf8","value":"ErrorKind::InvalidUtf8","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" This error occurs when translating a pattern that could match a byte\n sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1119},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":314890,"byte_end":314913,"line_start":66,"line_end":66,"column_start":5,"column_end":28},"name":"UnicodePropertyNotFound","qualname":"::hir::ErrorKind::UnicodePropertyNotFound","value":"ErrorKind::UnicodePropertyNotFound","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property name could not\n be found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1121},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":315011,"byte_end":315039,"line_start":69,"line_end":69,"column_start":5,"column_end":33},"name":"UnicodePropertyValueNotFound","qualname":"::hir::ErrorKind::UnicodePropertyValueNotFound","value":"ErrorKind::UnicodePropertyValueNotFound","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property value could not\n be found.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1123},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":315233,"byte_end":315257,"line_start":73,"line_end":73,"column_start":5,"column_end":29},"name":"UnicodePerlClassNotFound","qualname":"::hir::ErrorKind::UnicodePerlClassNotFound","value":"ErrorKind::UnicodePerlClassNotFound","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" This occurs when a Unicode-aware Perl character class (`\\w`, `\\s` or\n `\\d`) could not be found. This can occur when the `unicode-perl`\n crate feature is not enabled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1125},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":315432,"byte_end":315454,"line_start":77,"line_end":77,"column_start":5,"column_end":27},"name":"UnicodeCaseUnavailable","qualname":"::hir::ErrorKind::UnicodeCaseUnavailable","value":"ErrorKind::UnicodeCaseUnavailable","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" This occurs when the Unicode simple case mapping tables are not\n available, and the regular expression required Unicode aware case\n insensitivity.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1127},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":315662,"byte_end":315682,"line_start":83,"line_end":83,"column_start":5,"column_end":25},"name":"EmptyClassNotAllowed","qualname":"::hir::ErrorKind::EmptyClassNotAllowed","value":"ErrorKind::EmptyClassNotAllowed","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" This occurs when the translator attempts to construct a character class\n that is empty.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1129},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":315962,"byte_end":315977,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::hir::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2912},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":314444,"byte_end":314453,"line_start":57,"line_end":57,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::hir::ErrorKind","value":"ErrorKind::{UnicodeNotAllowed, InvalidUtf8, UnicodePropertyNotFound, UnicodePropertyValueNotFound, UnicodePerlClassNotFound, UnicodeCaseUnavailable, EmptyClassNotAllowed, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1115},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1127},{"krate":0,"index":1129}],"decl_id":null,"docs":" The type of an error that occurred while building an `Hir`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":314435,"byte_end":315980,"line_start":57,"line_end":91,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":2930},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":319295,"byte_end":319298,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"Hir","qualname":"::hir::Hir","value":"Hir {  }","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1133}],"decl_id":null,"docs":" A high-level intermediate representation (HIR) for a regular expression.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":319284,"byte_end":319441,"line_start":169,"line_end":174,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1135},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":319652,"byte_end":319657,"line_start":181,"line_end":181,"column_start":5,"column_end":10},"name":"Empty","qualname":"::hir::HirKind::Empty","value":"HirKind::Empty","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" The empty regular expression, which matches everything, including the\n empty string.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1137},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":319735,"byte_end":319742,"line_start":183,"line_end":183,"column_start":5,"column_end":12},"name":"Literal","qualname":"::hir::HirKind::Literal","value":"HirKind::Literal(Literal)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" A single literal character that matches exactly this character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1141},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":319943,"byte_end":319948,"line_start":187,"line_end":187,"column_start":5,"column_end":10},"name":"Class","qualname":"::hir::HirKind::Class","value":"HirKind::Class(Class)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" A single character class that matches any of the characters in the\n class. A class can either consist of Unicode scalar values as\n characters, or it can use bytes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1145},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320040,"byte_end":320046,"line_start":189,"line_end":189,"column_start":5,"column_end":11},"name":"Anchor","qualname":"::hir::HirKind::Anchor","value":"HirKind::Anchor(Anchor)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" An anchor assertion. An anchor assertion match always has zero length.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1149},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320198,"byte_end":320210,"line_start":192,"line_end":192,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::hir::HirKind::WordBoundary","value":"HirKind::WordBoundary(WordBoundary)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" A word boundary assertion, which may or may not be Unicode aware. A\n word boundary assertion match always has zero length.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1153},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320292,"byte_end":320302,"line_start":194,"line_end":194,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::hir::HirKind::Repetition","value":"HirKind::Repetition(Repetition)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" A repetition operation applied to a child expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1157},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320391,"byte_end":320396,"line_start":196,"line_end":196,"column_start":5,"column_end":10},"name":"Group","qualname":"::hir::HirKind::Group","value":"HirKind::Group(Group)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" A possibly capturing group, which contains a child expression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1161},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320630,"byte_end":320636,"line_start":202,"line_end":202,"column_start":5,"column_end":11},"name":"Concat","qualname":"::hir::HirKind::Concat","value":"HirKind::Concat(Vec<Hir>)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" A concatenation of expressions. A concatenation always has at least two\n child expressions.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1165},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320921,"byte_end":320932,"line_start":208,"line_end":208,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::hir::HirKind::Alternation","value":"HirKind::Alternation(Vec<Hir>)","parent":{"krate":0,"index":2950},"children":[],"decl_id":null,"docs":" An alternation of expressions. An alternation always has at least two\n child expressions.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2950},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":319538,"byte_end":319545,"line_start":178,"line_end":178,"column_start":10,"column_end":17},"name":"HirKind","qualname":"::hir::HirKind","value":"HirKind::{Empty, Literal, Class, Anchor, WordBoundary, Repetition, Group, Concat, Alternation}","parent":null,"children":[{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1141},{"krate":0,"index":1145},{"krate":0,"index":1149},{"krate":0,"index":1153},{"krate":0,"index":1157},{"krate":0,"index":1161},{"krate":0,"index":1165}],"decl_id":null,"docs":" The kind of an arbitrary `Hir` expression.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":319529,"byte_end":320945,"line_start":178,"line_end":209,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":321025,"byte_end":321029,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"kind","qualname":"<Hir>::kind","value":"fn (&self) -> &HirKind","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying HIR kind.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":321184,"byte_end":321193,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Hir>::into_kind","value":"fn (mut self) -> HirKind","parent":null,"children":[],"decl_id":null,"docs":" Consumes ownership of this HIR expression and returns its underlying\n `HirKind`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1330},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":321435,"byte_end":321440,"line_start":227,"line_end":227,"column_start":12,"column_end":17},"name":"empty","qualname":"<Hir>::empty","value":"fn () -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty HIR expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":322259,"byte_end":322266,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"literal","qualname":"<Hir>::literal","value":"fn (lit: Literal) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a literal HIR expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":322978,"byte_end":322983,"line_start":269,"line_end":269,"column_start":12,"column_end":17},"name":"class","qualname":"<Hir>::class","value":"fn (class: Class) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a class HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":323633,"byte_end":323639,"line_start":286,"line_end":286,"column_start":12,"column_end":18},"name":"anchor","qualname":"<Hir>::anchor","value":"fn (anchor: Anchor) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates an anchor assertion HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":324855,"byte_end":324868,"line_start":319,"line_end":319,"column_start":12,"column_end":25},"name":"word_boundary","qualname":"<Hir>::word_boundary","value":"fn (word_boundary: WordBoundary) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a word boundary assertion HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":325828,"byte_end":325838,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"repetition","qualname":"<Hir>::repetition","value":"fn (rep: Repetition) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a repetition HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":326973,"byte_end":326978,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"name":"group","qualname":"<Hir>::group","value":"fn (group: Group) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a group HIR expression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":327905,"byte_end":327911,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"concat","qualname":"<Hir>::concat","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the concatenation of the given expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":331879,"byte_end":331890,"line_start":481,"line_end":481,"column_start":12,"column_end":23},"name":"alternation","qualname":"<Hir>::alternation","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the alternation of the given expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":334568,"byte_end":334571,"line_start":548,"line_end":548,"column_start":12,"column_end":15},"name":"dot","qualname":"<Hir>::dot","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `.`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":335426,"byte_end":335429,"line_start":570,"line_end":570,"column_start":12,"column_end":15},"name":"any","qualname":"<Hir>::any","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `(?s).`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":336016,"byte_end":336030,"line_start":586,"line_end":586,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Hir>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR will always match valid UTF-8.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":336313,"byte_end":336330,"line_start":595,"line_end":595,"column_start":12,"column_end":29},"name":"is_all_assertions","qualname":"<Hir>::is_all_assertions","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this entire HIR expression is made up of\n zero-width assertions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":336598,"byte_end":336615,"line_start":602,"line_end":602,"column_start":12,"column_end":29},"name":"is_anchored_start","qualname":"<Hir>::is_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match from the\n beginning of text. This includes expressions like `^foo`, `^(foo|bar)`,\n `^foo|^bar` but not `^foo|bar`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":336875,"byte_end":336890,"line_start":609,"line_end":609,"column_start":12,"column_end":27},"name":"is_anchored_end","qualname":"<Hir>::is_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match at the end\n of text. This includes expressions like `foo$`, `(foo|bar)$`,\n `foo$|bar$` but not `foo$|bar`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":337482,"byte_end":337504,"line_start":622,"line_end":622,"column_start":12,"column_end":34},"name":"is_line_anchored_start","qualname":"<Hir>::is_line_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match from the\n beginning of text or the beginning of a line. This includes expressions\n like `^foo`, `(?m)^foo`, `^(foo|bar)`, `^(foo|bar)`, `(?m)^foo|^bar`\n but not `^foo|bar` or `(?m)^foo|bar`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":338102,"byte_end":338122,"line_start":635,"line_end":635,"column_start":12,"column_end":32},"name":"is_line_anchored_end","qualname":"<Hir>::is_line_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match at the\n end of text or the end of a line. This includes expressions like\n `foo$`, `(?m)foo$`, `(foo|bar)$`, `(?m)(foo|bar)$`, `foo$|bar$`,\n `(?m)(foo|bar)$`, but not `foo$|bar` or `(?m)foo$|bar`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":338480,"byte_end":338501,"line_start":643,"line_end":643,"column_start":12,"column_end":33},"name":"is_any_anchored_start","qualname":"<Hir>::is_any_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that\n is required to match at the beginning of text. Specifically, this\n returns true if the `^` symbol (when multiline mode is disabled) or the\n `\\A` escape appear anywhere in the regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":338854,"byte_end":338873,"line_start":651,"line_end":651,"column_start":12,"column_end":31},"name":"is_any_anchored_end","qualname":"<Hir>::is_any_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that is\n required to match at the end of text. Specifically, this returns true\n if the `$` symbol (when multiline mode is disabled) or the `\\z` escape\n appear anywhere in the regex.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":339189,"byte_end":339203,"line_start":660,"line_end":660,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Hir>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if the empty string is part of the language\n matched by this regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":339628,"byte_end":339638,"line_start":670,"line_end":670,"column_start":12,"column_end":22},"name":"is_literal","qualname":"<Hir>::is_literal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is a simple literal. This is only\n true when this HIR expression is either itself a `Literal` or a\n concatenation of only `Literal`s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":340193,"byte_end":340215,"line_start":682,"line_end":682,"column_start":12,"column_end":34},"name":"is_alternation_literal","qualname":"<Hir>::is_alternation_literal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is either a simple literal or an\n alternation of simple literals. This is only\n true when this HIR expression is either itself a `Literal` or a\n concatenation of only `Literal`s or an alternation of only `Literal`s.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":340617,"byte_end":340625,"line_start":693,"line_end":693,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HirKind>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is the empty regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":340858,"byte_end":340870,"line_start":702,"line_end":702,"column_start":12,"column_end":24},"name":"has_subexprs","qualname":"<HirKind>::has_subexprs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this kind has any (including possibly\n empty) subexpressions.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1169},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":342130,"byte_end":342137,"line_start":739,"line_end":739,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Literal::Unicode","value":"Literal::Unicode(char)","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":" A single character represented by a Unicode scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1173},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":342210,"byte_end":342214,"line_start":741,"line_end":741,"column_start":5,"column_end":9},"name":"Byte","qualname":"::hir::Literal::Byte","value":"Literal::Byte(u8)","parent":{"krate":0,"index":2970},"children":[],"decl_id":null,"docs":" A single character represented by an arbitrary byte.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2970},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":342050,"byte_end":342057,"line_start":737,"line_end":737,"column_start":10,"column_end":17},"name":"Literal","qualname":"::hir::Literal","value":"Literal::{Unicode, Byte}","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1173}],"decl_id":null,"docs":" The high-level intermediate representation of a literal.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":342041,"byte_end":342221,"line_start":737,"line_end":742,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":342345,"byte_end":342355,"line_start":747,"line_end":747,"column_start":12,"column_end":22},"name":"is_unicode","qualname":"<Literal>::is_unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this literal corresponds to a Unicode\n scalar value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1177},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":343561,"byte_end":343568,"line_start":775,"line_end":775,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":2990},"children":[],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1181},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":343681,"byte_end":343686,"line_start":778,"line_end":778,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::hir::Class::Bytes","value":"Class::Bytes(ClassBytes)","parent":{"krate":0,"index":2990},"children":[],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (one byte per\n character).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2990},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":343483,"byte_end":343488,"line_start":773,"line_end":773,"column_start":10,"column_end":15},"name":"Class","qualname":"::hir::Class","value":"Class::{Unicode, Bytes}","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1181}],"decl_id":null,"docs":" The high-level intermediate representation of a character class.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":343474,"byte_end":343701,"line_start":773,"line_end":779,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":344042,"byte_end":344058,"line_start":788,"line_end":788,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<Class>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply Unicode simple case folding to this character class, in place.\n The character class will be expanded to include all simple case folded\n character variants.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":344431,"byte_end":344437,"line_start":799,"line_end":799,"column_start":12,"column_end":18},"name":"negate","qualname":"<Class>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":345142,"byte_end":345156,"line_start":817,"line_end":817,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Class>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will only ever match\n valid UTF-8.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3010},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":345419,"byte_end":345431,"line_start":827,"line_end":827,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::hir::ClassUnicode","value":"ClassUnicode {  }","parent":null,"children":[{"krate":0,"index":1185}],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":345408,"byte_end":345476,"line_start":827,"line_end":829,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":345669,"byte_end":345672,"line_start":836,"line_end":836,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicode>::new","value":"fn <I> (ranges: I) -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":345886,"byte_end":345891,"line_start":844,"line_end":844,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassUnicode>::empty","value":"fn () -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":346001,"byte_end":346005,"line_start":849,"line_end":849,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassUnicode>::push","value":"fn (&mut self, range: ClassUnicodeRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1406},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":346214,"byte_end":346218,"line_start":856,"line_end":856,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassUnicode>::iter","value":"fn (&self) -> ClassUnicodeIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":346357,"byte_end":346363,"line_start":861,"line_end":861,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassUnicode>::ranges","value":"fn (&self) -> &[ClassUnicodeRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":347099,"byte_end":347115,"line_start":878,"line_end":878,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassUnicode>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters, according to Unicode's \"simple\" mapping. For example, if\n this class consists of the range `a-z`, then applying case folding will\n result in the class containing both the ranges `a-z` and `A-Z`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":347912,"byte_end":347932,"line_start":897,"line_end":897,"column_start":12,"column_end":32},"name":"try_case_fold_simple","qualname":"<ClassUnicode>::try_case_fold_simple","value":"fn (&mut self) -> result::Result<(), CaseFoldError>","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters, according to Unicode's \"simple\" mapping. For example, if\n this class consists of the range `a-z`, then applying case folding will\n result in the class containing both the ranges `a-z` and `A-Z`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":348234,"byte_end":348240,"line_start":907,"line_end":907,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassUnicode>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":348376,"byte_end":348381,"line_start":912,"line_end":912,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassUnicode>::union","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this character class with the given character class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":348560,"byte_end":348569,"line_start":918,"line_end":918,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassUnicode>::intersect","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this character class with the given character class, in\n place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":348743,"byte_end":348753,"line_start":923,"line_end":923,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassUnicode>::difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given character class from this character class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":349322,"byte_end":349342,"line_start":935,"line_end":935,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassUnicode>::symmetric_difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given character classes, in\n place.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3030},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":349602,"byte_end":349618,"line_start":944,"line_end":944,"column_start":12,"column_end":28},"name":"ClassUnicodeIter","qualname":"::hir::ClassUnicodeIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a Unicode character class.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3036},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":350085,"byte_end":350102,"line_start":959,"line_end":959,"column_start":12,"column_end":29},"name":"ClassUnicodeRange","qualname":"::hir::ClassUnicodeRange","value":"ClassUnicodeRange {  }","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1197}],"decl_id":null,"docs":" A single range of characters represented by Unicode scalar values.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":350074,"byte_end":350138,"line_start":959,"line_end":962,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":350074,"byte_end":350138,"line_start":959,"line_end":962,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":352531,"byte_end":352534,"line_start":1042,"line_end":1042,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicodeRange>::new","value":"fn (start: char, end: char) -> ClassUnicodeRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new Unicode scalar value range for a character class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":352785,"byte_end":352790,"line_start":1050,"line_end":1050,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassUnicodeRange>::start","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":352985,"byte_end":352988,"line_start":1058,"line_end":1058,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassUnicodeRange>::end","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3074},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353188,"byte_end":353198,"line_start":1066,"line_end":1066,"column_start":12,"column_end":22},"name":"ClassBytes","qualname":"::hir::ClassBytes","value":"ClassBytes {  }","parent":null,"children":[{"krate":0,"index":1207}],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (where one byte\n corresponds to one character).\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353177,"byte_end":353241,"line_start":1066,"line_end":1068,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353432,"byte_end":353435,"line_start":1075,"line_end":1075,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytes>::new","value":"fn <I> (ranges: I) -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353643,"byte_end":353648,"line_start":1083,"line_end":1083,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassBytes>::empty","value":"fn () -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353754,"byte_end":353758,"line_start":1088,"line_end":1088,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassBytes>::push","value":"fn (&mut self, range: ClassBytesRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353965,"byte_end":353969,"line_start":1095,"line_end":1095,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassBytes>::iter","value":"fn (&self) -> ClassBytesIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":354104,"byte_end":354110,"line_start":1100,"line_end":1100,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassBytes>::ranges","value":"fn (&self) -> &[ClassBytesRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":354575,"byte_end":354591,"line_start":1111,"line_end":1111,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassBytes>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters. For example, if this class consists of the range `a-z`,\n then applying case folding will result in the class containing both the\n ranges `a-z` and `A-Z`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":354866,"byte_end":354872,"line_start":1119,"line_end":1119,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassBytes>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this byte class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":354998,"byte_end":355003,"line_start":1124,"line_end":1124,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassBytes>::union","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this byte class with the given byte class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":355162,"byte_end":355171,"line_start":1129,"line_end":1129,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassBytes>::intersect","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this byte class with the given byte class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":355333,"byte_end":355343,"line_start":1134,"line_end":1134,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassBytes>::difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given byte class from this byte class, in place.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":355892,"byte_end":355912,"line_start":1145,"line_end":1145,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassBytes>::symmetric_difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given byte classes, in place.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":356227,"byte_end":356239,"line_start":1152,"line_end":1152,"column_start":12,"column_end":24},"name":"is_all_ascii","qualname":"<ClassBytes>::is_all_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will either match\n nothing or only ASCII bytes. Stated differently, this returns false\n if and only if this class contains a non-ASCII byte.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3094},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":356495,"byte_end":356509,"line_start":1161,"line_end":1161,"column_start":12,"column_end":26},"name":"ClassBytesIter","qualname":"::hir::ClassBytesIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a byte character class.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3100},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":356962,"byte_end":356977,"line_start":1176,"line_end":1176,"column_start":12,"column_end":27},"name":"ClassBytesRange","qualname":"::hir::ClassBytesRange","value":"ClassBytesRange {  }","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1219}],"decl_id":null,"docs":" A single range of characters represented by arbitrary bytes.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":356951,"byte_end":357009,"line_start":1176,"line_end":1179,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":356951,"byte_end":357009,"line_start":1176,"line_end":1179,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":358536,"byte_end":358539,"line_start":1229,"line_end":1229,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytesRange>::new","value":"fn (start: u8, end: u8) -> ClassBytesRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new byte range for a character class.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":358782,"byte_end":358787,"line_start":1237,"line_end":1237,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassBytesRange>::start","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":358980,"byte_end":358983,"line_start":1245,"line_end":1245,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassBytesRange>::end","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1229},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":359926,"byte_end":359935,"line_start":1275,"line_end":1275,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::hir::Anchor::StartLine","value":"Anchor::StartLine","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" Match the beginning of a line or the beginning of text. Specifically,\n this matches at the starting position of the input, or at the position\n immediately following a `\\n` character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1231},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":360129,"byte_end":360136,"line_start":1279,"line_end":1279,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::hir::Anchor::EndLine","value":"Anchor::EndLine","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" Match the end of a line or the end of text. Specifically,\n this matches at the end position of the input, or at the position\n immediately preceding a `\\n` character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1233},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":360253,"byte_end":360262,"line_start":1282,"line_end":1282,"column_start":5,"column_end":14},"name":"StartText","qualname":"::hir::Anchor::StartText","value":"Anchor::StartText","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" Match the beginning of text. Specifically, this matches at the starting\n position of the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1235},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":360371,"byte_end":360378,"line_start":1285,"line_end":1285,"column_start":5,"column_end":12},"name":"EndText","qualname":"::hir::Anchor::EndText","value":"Anchor::EndText","parent":{"krate":0,"index":3138},"children":[],"decl_id":null,"docs":" Match the end of text. Specifically, this matches at the ending\n position of the input.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3138},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":359708,"byte_end":359714,"line_start":1271,"line_end":1271,"column_start":10,"column_end":16},"name":"Anchor","qualname":"::hir::Anchor","value":"Anchor::{StartLine, EndLine, StartText, EndText}","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1235}],"decl_id":null,"docs":" The high-level intermediate representation for an anchor assertion.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":359699,"byte_end":360381,"line_start":1271,"line_end":1286,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1237},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":360819,"byte_end":360826,"line_start":1296,"line_end":1296,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::WordBoundary::Unicode","value":"WordBoundary::Unicode","parent":{"krate":0,"index":3156},"children":[],"decl_id":null,"docs":" Match a Unicode-aware word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":360891,"byte_end":360904,"line_start":1298,"line_end":1298,"column_start":5,"column_end":18},"name":"UnicodeNegate","qualname":"::hir::WordBoundary::UnicodeNegate","value":"WordBoundary::UnicodeNegate","parent":{"krate":0,"index":3156},"children":[],"decl_id":null,"docs":" Match a Unicode-aware negation of a word boundary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1241},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":361133,"byte_end":361138,"line_start":1302,"line_end":1302,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::hir::WordBoundary::Ascii","value":"WordBoundary::Ascii","parent":{"krate":0,"index":3156},"children":[],"decl_id":null,"docs":" Match an ASCII-only word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1243},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":361201,"byte_end":361212,"line_start":1304,"line_end":1304,"column_start":5,"column_end":16},"name":"AsciiNegate","qualname":"::hir::WordBoundary::AsciiNegate","value":"WordBoundary::AsciiNegate","parent":{"krate":0,"index":3156},"children":[],"decl_id":null,"docs":" Match an ASCII-only negation of a word boundary.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3156},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":360575,"byte_end":360587,"line_start":1292,"line_end":1292,"column_start":10,"column_end":22},"name":"WordBoundary","qualname":"::hir::WordBoundary","value":"WordBoundary::{Unicode, UnicodeNegate, Ascii, AsciiNegate}","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1243}],"decl_id":null,"docs":" The high-level intermediate representation for a word-boundary assertion.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":360566,"byte_end":361215,"line_start":1292,"line_end":1305,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":361325,"byte_end":361335,"line_start":1309,"line_end":1309,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<WordBoundary>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this word boundary assertion is negated.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3174},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":361859,"byte_end":361864,"line_start":1325,"line_end":1325,"column_start":12,"column_end":17},"name":"Group","qualname":"::hir::Group","value":"Group { kind, hir }","parent":null,"children":[{"krate":0,"index":1245},{"krate":0,"index":1247}],"decl_id":null,"docs":" The high-level intermediate representation for a group.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":361848,"byte_end":362150,"line_start":1325,"line_end":1332,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":1245},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362038,"byte_end":362042,"line_start":1329,"line_end":1329,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Group::kind","value":"hir::GroupKind","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":" The kind of this group. If it is a capturing group, then the kind\n contains the capture group index (and the name, if it is a named\n group).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1247},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362134,"byte_end":362137,"line_start":1331,"line_end":1331,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Group::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":3174},"children":[],"decl_id":null,"docs":" The expression inside the capturing group, which may be empty.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1249},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362342,"byte_end":362354,"line_start":1340,"line_end":1340,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::hir::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":3194},"children":[],"decl_id":null,"docs":" A normal unnamed capturing group.","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1253},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362398,"byte_end":362409,"line_start":1342,"line_end":1342,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::hir::GroupKind::CaptureName","value":"GroupKind::CaptureName { name, index }","parent":{"krate":0,"index":3194},"children":[],"decl_id":null,"docs":" A named capturing group.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362575,"byte_end":362587,"line_start":1349,"line_end":1349,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::hir::GroupKind::NonCapturing","value":"GroupKind::NonCapturing","parent":{"krate":0,"index":3194},"children":[],"decl_id":null,"docs":" A non-capturing group.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3194},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362223,"byte_end":362232,"line_start":1336,"line_end":1336,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::hir::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1253},{"krate":0,"index":1259}],"decl_id":null,"docs":" The kind of group.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362214,"byte_end":362590,"line_start":1336,"line_end":1350,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3214},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362804,"byte_end":362814,"line_start":1357,"line_end":1357,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::hir::Repetition","value":"Repetition { kind, greedy, hir }","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1265}],"decl_id":null,"docs":" The high-level intermediate representation of a repetition operator.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362793,"byte_end":363391,"line_start":1357,"line_end":1370,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":1261},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":362871,"byte_end":362875,"line_start":1359,"line_end":1359,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Repetition::kind","value":"hir::RepetitionKind","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" The kind of this repetition operator.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1263},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":363314,"byte_end":363320,"line_start":1367,"line_end":1367,"column_start":9,"column_end":15},"name":"greedy","qualname":"::hir::Repetition::greedy","value":"bool","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" Whether this repetition operator is greedy or not. A greedy operator\n will match as much as it can. A non-greedy operator will match as\n little as it can.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1265},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":363375,"byte_end":363378,"line_start":1369,"line_end":1369,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Repetition::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":3214},"children":[],"decl_id":null,"docs":" The expression being repeated.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":363944,"byte_end":363958,"line_start":1382,"line_end":1382,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Repetition>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition operator makes it possible\n to match the empty string.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1267},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364549,"byte_end":364558,"line_start":1398,"line_end":1398,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::hir::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":3234},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or one times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364617,"byte_end":364627,"line_start":1400,"line_end":1400,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::hir::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":3234},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or more times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364685,"byte_end":364694,"line_start":1402,"line_end":1402,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::hir::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":3234},"children":[],"decl_id":null,"docs":" Matches a sub-expression one or more times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1273},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364766,"byte_end":364771,"line_start":1404,"line_end":1404,"column_start":5,"column_end":10},"name":"Range","qualname":"::hir::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":3234},"children":[],"decl_id":null,"docs":" Matches a sub-expression within a bounded range of times.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3234},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364476,"byte_end":364490,"line_start":1396,"line_end":1396,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::hir::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1271},{"krate":0,"index":1273}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364467,"byte_end":364791,"line_start":1396,"line_end":1405,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364968,"byte_end":364975,"line_start":1411,"line_end":1411,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::hir::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":3254},"children":[],"decl_id":null,"docs":" Matches a sub-expression exactly this many times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":365045,"byte_end":365052,"line_start":1413,"line_end":1413,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::hir::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":3254},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least this many times.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":365138,"byte_end":365145,"line_start":1415,"line_end":1415,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::hir::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":3254},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least `m` times and at most `n` times.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3254},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364888,"byte_end":364903,"line_start":1409,"line_end":1409,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::hir::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1281},{"krate":0,"index":1285}],"decl_id":null,"docs":" The kind of a counted repetition operator.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":364879,"byte_end":365158,"line_start":1409,"line_end":1416,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":3338},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":596484,"byte_end":596497,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::parser::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1295}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":596681,"byte_end":596684,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":596828,"byte_end":596833,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":598395,"byte_end":598405,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":599348,"byte_end":599353,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":600101,"byte_end":600119,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<ParserBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, the parser will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1554},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":600679,"byte_end":600696,"line_start":105,"line_end":105,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1556},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":601027,"byte_end":601043,"line_start":114,"line_end":114,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<ParserBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1558},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":601376,"byte_end":601386,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<ParserBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":601721,"byte_end":601741,"line_start":132,"line_end":132,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<ParserBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":602071,"byte_end":602081,"line_start":141,"line_end":141,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<ParserBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag by default.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":602640,"byte_end":602647,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ParserBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3352},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":603524,"byte_end":603530,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1299}],"decl_id":null,"docs":" A convenience parser for regular expressions.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1568},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":603977,"byte_end":603980,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":604142,"byte_end":604147,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<hir::Hir>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into a high level intermediate\n representation.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3368},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":605442,"byte_end":605455,"line_start":36,"line_end":36,"column_start":12,"column_end":25},"name":"CaseFoldError","qualname":"::unicode::CaseFoldError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that occurs when Unicode-aware simple case folding fails.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3374},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":606116,"byte_end":606132,"line_start":56,"line_end":56,"column_start":12,"column_end":28},"name":"UnicodeWordError","qualname":"::unicode::UnicodeWordError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that occurs when the Unicode-aware `\\w` class is unavailable.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1696},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utf8","qualname":"::utf8","value":"/Users/connorcantrell/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.12/src/utf8.rs","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":3402},{"krate":0,"index":3434},{"krate":0,"index":3430},{"krate":0,"index":3426},{"krate":0,"index":3420},{"krate":0,"index":3408},{"krate":0,"index":3404},{"krate":0,"index":1706},{"krate":0,"index":1718},{"krate":0,"index":1726},{"krate":0,"index":3436},{"krate":0,"index":3466},{"krate":0,"index":3464},{"krate":0,"index":3460},{"krate":0,"index":3454},{"krate":0,"index":3442},{"krate":0,"index":3438},{"krate":0,"index":1732},{"krate":0,"index":1738},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1758},{"krate":0,"index":1764},{"krate":0,"index":1776}],"decl_id":null,"docs":"Converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642139,"byte_end":642161,"line_start":83,"line_end":83,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1351},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642643,"byte_end":642646,"line_start":101,"line_end":101,"column_start":5,"column_end":8},"name":"One","qualname":"::utf8::Utf8Sequence::One","value":"Utf8Sequence::One(Utf8Range)","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" One byte range.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1355},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642699,"byte_end":642702,"line_start":103,"line_end":103,"column_start":5,"column_end":8},"name":"Two","qualname":"::utf8::Utf8Sequence::Two","value":"Utf8Sequence::Two([Utf8Range; 2])","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" Two successive byte ranges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1361},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642762,"byte_end":642767,"line_start":105,"line_end":105,"column_start":5,"column_end":10},"name":"Three","qualname":"::utf8::Utf8Sequence::Three","value":"Utf8Sequence::Three([Utf8Range; 3])","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" Three successive byte ranges.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642826,"byte_end":642830,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Four","qualname":"::utf8::Utf8Sequence::Four","value":"Utf8Sequence::Four([Utf8Range; 4])","parent":{"krate":0,"index":3402},"children":[],"decl_id":null,"docs":" Four successive byte ranges.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3402},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642600,"byte_end":642612,"line_start":99,"line_end":99,"column_start":10,"column_end":22},"name":"Utf8Sequence","qualname":"::utf8::Utf8Sequence","value":"Utf8Sequence::{One, Two, Three, Four}","parent":null,"children":[{"krate":0,"index":1351},{"krate":0,"index":1355},{"krate":0,"index":1361},{"krate":0,"index":1367}],"decl_id":null,"docs":" Utf8Sequence represents a sequence of byte ranges.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642591,"byte_end":642849,"line_start":99,"line_end":108,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642591,"byte_end":642849,"line_start":99,"line_end":108,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":643943,"byte_end":643951,"line_start":138,"line_end":138,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Utf8Sequence>::as_slice","value":"fn (&self) -> &[Utf8Range]","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying sequence of byte ranges as a slice.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1714},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":644353,"byte_end":644356,"line_start":151,"line_end":151,"column_start":12,"column_end":15},"name":"len","qualname":"<Utf8Sequence>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of byte ranges in this sequence.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":644525,"byte_end":644532,"line_start":157,"line_end":157,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Sequence>::matches","value":"fn (&self, bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if a prefix of `bytes` matches this sequence\n of byte ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3436},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645582,"byte_end":645591,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"Utf8Range","qualname":"::utf8::Utf8Range","value":"Utf8Range { start, end }","parent":null,"children":[{"krate":0,"index":1385},{"krate":0,"index":1387}],"decl_id":null,"docs":" A single inclusive range of UTF-8 bytes.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645571,"byte_end":645711,"line_start":195,"line_end":200,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645571,"byte_end":645711,"line_start":195,"line_end":200,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":1385},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645643,"byte_end":645648,"line_start":197,"line_end":197,"column_start":9,"column_end":14},"name":"start","qualname":"::utf8::Utf8Range::start","value":"u8","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" Start of byte range (inclusive).\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1387},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645701,"byte_end":645704,"line_start":199,"line_end":199,"column_start":9,"column_end":12},"name":"end","qualname":"::utf8::Utf8Range::end","value":"u8","parent":{"krate":0,"index":3436},"children":[],"decl_id":null,"docs":" End of byte range (inclusive).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645903,"byte_end":645910,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"matches","qualname":"<Utf8Range>::matches","value":"fn (&self, b: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given byte is in this range.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1742},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":648259,"byte_end":648272,"line_start":273,"line_end":273,"column_start":12,"column_end":25},"name":"Utf8Sequences","qualname":"::utf8::Utf8Sequences","value":"Utf8Sequences {  }","parent":null,"children":[{"krate":0,"index":371}],"decl_id":null,"docs":" An iterator over ranges of matching UTF-8 byte sequences.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":648440,"byte_end":648443,"line_start":280,"line_end":280,"column_start":12,"column_end":15},"name":"new","qualname":"<Utf8Sequences>::new","value":"fn (start: char, end: char) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator over UTF-8 byte ranges for the scalar value range\n given.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":648807,"byte_end":648812,"line_start":291,"line_end":291,"column_start":12,"column_end":17},"name":"reset","qualname":"<Utf8Sequences>::reset","value":"fn (&mut self, start: char, end: char) -> ()","parent":null,"children":[],"decl_id":null,"docs":" reset resets the scalar value range.\n Any existing state is cleared, but resources may be reused.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1778},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7553,"byte_end":7559,"line_start":177,"line_end":177,"column_start":8,"column_end":14},"name":"escape","qualname":"::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1780},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7930,"byte_end":7941,"line_start":187,"line_end":187,"column_start":8,"column_end":19},"name":"escape_into","qualname":"::escape_into","value":"fn (text: &str, buf: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Escapes all meta characters in `text` and writes the result into `buf`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1782},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8580,"byte_end":8597,"line_start":205,"line_end":205,"column_start":8,"column_end":25},"name":"is_meta_character","qualname":"::is_meta_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the give character has significance in a regex.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1784},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9475,"byte_end":9492,"line_start":229,"line_end":229,"column_start":8,"column_end":25},"name":"is_word_character","qualname":"::is_word_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is a Unicode word\n character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1786},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10165,"byte_end":10186,"line_start":247,"line_end":247,"column_start":8,"column_end":29},"name":"try_is_word_character","qualname":"::try_is_word_character","value":"fn (c: char) -> std::result::Result<bool, UnicodeWordError>","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is a Unicode word\n character.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1788},"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10473,"byte_end":10485,"line_start":257,"line_end":257,"column_start":8,"column_end":20},"name":"is_word_byte","qualname":"::is_word_byte","value":"fn (c: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is an ASCII word character.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":62377,"byte_end":62386,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":65255,"byte_end":65268,"line_start":119,"line_end":119,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":65350,"byte_end":65363,"line_start":125,"line_end":125,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":73902,"byte_end":73908,"line_start":323,"line_end":323,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":75494,"byte_end":75501,"line_start":365,"line_end":365,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":98028,"byte_end":98035,"line_start":960,"line_end":960,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":142690,"byte_end":142701,"line_start":2140,"line_end":2140,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":143719,"byte_end":143730,"line_start":2175,"line_end":2175,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":265693,"byte_end":265707,"line_start":19,"line_end":19,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":265791,"byte_end":265805,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":266465,"byte_end":266472,"line_start":49,"line_end":49,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":267128,"byte_end":267134,"line_start":70,"line_end":70,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":269725,"byte_end":269731,"line_start":156,"line_end":156,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":340},{"krate":0,"index":344},{"krate":0,"index":348},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":370},{"krate":0,"index":374},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":290556,"byte_end":290567,"line_start":201,"line_end":201,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":298983,"byte_end":298988,"line_start":437,"line_end":437,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":299381,"byte_end":299391,"line_start":450,"line_end":450,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":299965,"byte_end":299976,"line_start":467,"line_end":467,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":300373,"byte_end":300383,"line_start":480,"line_end":480,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":300764,"byte_end":300775,"line_start":492,"line_end":492,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12943,"byte_end":12948,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":19240,"byte_end":19245,"line_start":178,"line_end":178,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":21277,"byte_end":21282,"line_start":216,"line_end":216,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":21421,"byte_end":21430,"line_start":222,"line_end":222,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25307,"byte_end":25311,"line_start":321,"line_end":321,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25455,"byte_end":25459,"line_start":327,"line_end":327,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25603,"byte_end":25607,"line_start":333,"line_end":333,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26248,"byte_end":26256,"line_start":354,"line_end":354,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26480,"byte_end":26488,"line_start":364,"line_end":364,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26609,"byte_end":26617,"line_start":370,"line_end":370,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26730,"byte_end":26734,"line_start":376,"line_end":376,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":27822,"byte_end":27830,"line_start":411,"line_end":411,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30461,"byte_end":30464,"line_start":484,"line_end":484,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32072,"byte_end":32075,"line_start":535,"line_end":535,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32457,"byte_end":32468,"line_start":551,"line_end":551,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33196,"byte_end":33202,"line_start":575,"line_end":575,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34154,"byte_end":34161,"line_start":605,"line_end":605,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36769,"byte_end":36783,"line_start":682,"line_end":682,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37639,"byte_end":37644,"line_start":708,"line_end":708,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39335,"byte_end":39349,"line_start":787,"line_end":787,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41137,"byte_end":41149,"line_start":836,"line_end":836,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42659,"byte_end":42677,"line_start":883,"line_end":883,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43940,"byte_end":43948,"line_start":921,"line_end":921,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45540,"byte_end":45552,"line_start":971,"line_end":971,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46384,"byte_end":46397,"line_start":998,"line_end":998,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46983,"byte_end":46996,"line_start":1018,"line_end":1018,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50974,"byte_end":50989,"line_start":1155,"line_end":1155,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51876,"byte_end":51881,"line_start":1184,"line_end":1184,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":54095,"byte_end":54100,"line_start":1260,"line_end":1260,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55866,"byte_end":55879,"line_start":1321,"line_end":1321,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56521,"byte_end":56524,"line_start":1350,"line_end":1350,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":58376,"byte_end":58384,"line_start":1400,"line_end":1400,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303070,"byte_end":303075,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303179,"byte_end":303184,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303288,"byte_end":303293,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303536,"byte_end":303541,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":304542,"byte_end":304551,"line_start":80,"line_end":80,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":304829,"byte_end":304838,"line_start":91,"line_end":91,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":305109,"byte_end":305118,"line_start":102,"line_end":102,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":307905,"byte_end":307910,"line_start":167,"line_end":167,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":396622,"byte_end":396633,"line_start":40,"line_end":40,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408170,"byte_end":408185,"line_start":327,"line_end":327,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":415952,"byte_end":415960,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":442643,"byte_end":442651,"line_start":840,"line_end":840,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":442927,"byte_end":442934,"line_start":850,"line_end":850,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443432,"byte_end":443439,"line_start":872,"line_end":872,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443541,"byte_end":443548,"line_start":878,"line_end":878,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443687,"byte_end":443694,"line_start":884,"line_end":884,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443961,"byte_end":443968,"line_start":894,"line_end":894,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":444048,"byte_end":444055,"line_start":900,"line_end":900,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":444167,"byte_end":444174,"line_start":907,"line_end":907,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":470474,"byte_end":470488,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":470572,"byte_end":470586,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":471661,"byte_end":471668,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":472324,"byte_end":472330,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":477264,"byte_end":477270,"line_start":212,"line_end":212,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1072},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":482199,"byte_end":482216,"line_start":21,"line_end":21,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":482306,"byte_end":482323,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":485462,"byte_end":485472,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":488566,"byte_end":488574,"line_start":185,"line_end":185,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":490099,"byte_end":490110,"line_start":233,"line_end":233,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1170},{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":504304,"byte_end":504315,"line_start":592,"line_end":592,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1212},{"krate":0,"index":1216},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":518509,"byte_end":518514,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1232},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":592318,"byte_end":592329,"line_start":98,"line_end":98,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1288},{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":595684,"byte_end":595689,"line_start":192,"line_end":192,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313886,"byte_end":313891,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1300},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":315987,"byte_end":315996,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":316902,"byte_end":316907,"line_start":115,"line_end":115,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":317009,"byte_end":317014,"line_start":121,"line_end":121,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":317153,"byte_end":317162,"line_start":127,"line_end":127,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320952,"byte_end":320955,"line_start":211,"line_end":211,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1326},{"krate":0,"index":1330},{"krate":0,"index":1332},{"krate":0,"index":1334},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":340290,"byte_end":340297,"line_start":687,"line_end":687,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1376},{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":341506,"byte_end":341509,"line_start":723,"line_end":723,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":342228,"byte_end":342235,"line_start":744,"line_end":744,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":343708,"byte_end":343713,"line_start":781,"line_end":781,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1394},{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":345483,"byte_end":345495,"line_start":831,"line_end":831,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1412},{"krate":0,"index":1414},{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":349687,"byte_end":349703,"line_start":946,"line_end":946,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":350160,"byte_end":350177,"line_start":964,"line_end":964,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":350784,"byte_end":350801,"line_start":984,"line_end":984,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1444},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":352275,"byte_end":352292,"line_start":1037,"line_end":1037,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353248,"byte_end":353258,"line_start":1070,"line_end":1070,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1464},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":356576,"byte_end":356590,"line_start":1163,"line_end":1163,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":357029,"byte_end":357044,"line_start":1181,"line_end":1181,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":358298,"byte_end":358313,"line_start":1224,"line_end":1224,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":359045,"byte_end":359060,"line_start":1250,"line_end":1250,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":361222,"byte_end":361234,"line_start":1307,"line_end":1307,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":363398,"byte_end":363408,"line_start":1372,"line_end":1372,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":365325,"byte_end":365328,"line_start":1420,"line_end":1420,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":367682,"byte_end":367689,"line_start":1492,"line_end":1492,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1532},{"krate":0,"index":3294},{"krate":0,"index":3296},{"krate":0,"index":3298},{"krate":0,"index":3300},{"krate":0,"index":3302},{"krate":0,"index":3304},{"krate":0,"index":3306},{"krate":0,"index":3308},{"krate":0,"index":3310},{"krate":0,"index":3312},{"krate":0,"index":3314},{"krate":0,"index":3316},{"krate":0,"index":3318},{"krate":0,"index":3320},{"krate":0,"index":3322},{"krate":0,"index":3324},{"krate":0,"index":3326},{"krate":0,"index":3328},{"krate":0,"index":3330},{"krate":0,"index":3332},{"krate":0,"index":3334},{"krate":0,"index":3336}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":596588,"byte_end":596601,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":603607,"byte_end":603613,"line_start":180,"line_end":180,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1568},{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":605484,"byte_end":605497,"line_start":38,"line_end":38,"column_start":23,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":605524,"byte_end":605537,"line_start":40,"line_end":40,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":606161,"byte_end":606177,"line_start":58,"line_end":58,"column_start":23,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":606204,"byte_end":606220,"line_start":60,"line_end":60,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1598}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":610662,"byte_end":610672,"line_start":187,"line_end":187,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642856,"byte_end":642868,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1714},{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645026,"byte_end":645038,"line_start":179,"line_end":179,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1728}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645718,"byte_end":645727,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":646005,"byte_end":646014,"line_start":213,"line_end":213,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":648318,"byte_end":648331,"line_start":277,"line_end":277,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":649137,"byte_end":649148,"line_start":306,"line_end":306,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":649304,"byte_end":649317,"line_start":312,"line_end":312,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1762}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":651279,"byte_end":651290,"line_start":366,"line_end":366,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7294,"byte_end":7297,"line_start":164,"line_end":164,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":20}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12181,"byte_end":12186,"line_start":11,"line_end":11,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12196,"byte_end":12201,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":272}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7330,"byte_end":7333,"line_start":167,"line_end":167,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":710}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313395,"byte_end":313402,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":856}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313412,"byte_end":313417,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1018}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313427,"byte_end":313436,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1076}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7388,"byte_end":7392,"line_start":171,"line_end":171,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1696}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":62377,"byte_end":62386,"line_start":32,"line_end":32,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":65255,"byte_end":65268,"line_start":119,"line_end":119,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1810},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":65350,"byte_end":65363,"line_start":125,"line_end":125,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":73902,"byte_end":73908,"line_start":323,"line_end":323,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":75494,"byte_end":75501,"line_start":365,"line_end":365,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":98028,"byte_end":98035,"line_start":960,"line_end":960,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":142690,"byte_end":142701,"line_start":2140,"line_end":2140,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,97,114,115,101,46,114,115],"byte_start":143719,"byte_end":143730,"line_start":2175,"line_end":2175,"column_start":50,"column_end":61},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1860},"to":{"krate":0,"index":394}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":265693,"byte_end":265707,"line_start":19,"line_end":19,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1866},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":265791,"byte_end":265805,"line_start":25,"line_end":25,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":266465,"byte_end":266472,"line_start":49,"line_end":49,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":267128,"byte_end":267134,"line_start":70,"line_end":70,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1882},"to":{"krate":0,"index":394}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,112,114,105,110,116,46,114,115],"byte_start":269725,"byte_end":269731,"line_start":156,"line_end":156,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1882},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":290556,"byte_end":290567,"line_start":201,"line_end":201,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":298983,"byte_end":298988,"line_start":437,"line_end":437,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":299381,"byte_end":299391,"line_start":450,"line_end":450,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":299965,"byte_end":299976,"line_start":467,"line_end":467,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":300373,"byte_end":300383,"line_start":480,"line_end":480,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":426},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,118,105,115,105,116,111,114,46,114,115],"byte_start":300764,"byte_end":300775,"line_start":492,"line_end":492,"column_start":25,"column_end":36},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":428},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":12943,"byte_end":12948,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":1888},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":19240,"byte_end":19245,"line_start":178,"line_end":178,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1888},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":21277,"byte_end":21282,"line_start":216,"line_end":216,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1888},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":21421,"byte_end":21430,"line_start":222,"line_end":222,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1908},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25307,"byte_end":25311,"line_start":321,"line_end":321,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1928},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25455,"byte_end":25459,"line_start":327,"line_end":327,"column_start":14,"column_end":18},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1928},"to":{"krate":2,"index":2446}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":25603,"byte_end":25607,"line_start":333,"line_end":333,"column_start":21,"column_end":25},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1928},"to":{"krate":2,"index":2464}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26248,"byte_end":26256,"line_start":354,"line_end":354,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1946},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26480,"byte_end":26488,"line_start":364,"line_end":364,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1946},"to":{"krate":2,"index":2446}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26609,"byte_end":26617,"line_start":370,"line_end":370,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1946},"to":{"krate":2,"index":2464}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":26730,"byte_end":26734,"line_start":376,"line_end":376,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":27822,"byte_end":27830,"line_start":411,"line_end":411,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1946},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":30461,"byte_end":30464,"line_start":484,"line_end":484,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":2004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32072,"byte_end":32075,"line_start":535,"line_end":535,"column_start":23,"column_end":26},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":2004},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":32457,"byte_end":32468,"line_start":551,"line_end":551,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":2024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":33196,"byte_end":33202,"line_start":575,"line_end":575,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":2044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":34154,"byte_end":34161,"line_start":605,"line_end":605,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":2064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":36769,"byte_end":36783,"line_start":682,"line_end":682,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":2122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":37639,"byte_end":37644,"line_start":708,"line_end":708,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":2140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":39335,"byte_end":39349,"line_start":787,"line_end":787,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":2218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":41137,"byte_end":41149,"line_start":836,"line_end":836,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":2236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":42659,"byte_end":42677,"line_start":883,"line_end":883,"column_start":6,"column_end":24},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":2276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":43940,"byte_end":43948,"line_start":921,"line_end":921,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":2314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":45540,"byte_end":45552,"line_start":971,"line_end":971,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46384,"byte_end":46397,"line_start":998,"line_end":998,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":2354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":46983,"byte_end":46996,"line_start":1018,"line_end":1018,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":2374},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":50974,"byte_end":50989,"line_start":1155,"line_end":1155,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":2532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":51876,"byte_end":51881,"line_start":1184,"line_end":1184,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":2552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":54095,"byte_end":54100,"line_start":1260,"line_end":1260,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":2632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":55866,"byte_end":55879,"line_start":1321,"line_end":1321,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":2672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":56521,"byte_end":56524,"line_start":1350,"line_end":1350,"column_start":15,"column_end":18},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":2004},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,97,115,116,47,109,111,100,46,114,115],"byte_start":58376,"byte_end":58384,"line_start":1400,"line_end":1400,"column_start":15,"column_end":23},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":2314},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303070,"byte_end":303075,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":2732},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303179,"byte_end":303184,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":2732},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303288,"byte_end":303293,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":2732},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":303536,"byte_end":303541,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":2732},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":304542,"byte_end":304551,"line_start":80,"line_end":80,"column_start":35,"column_end":44},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":2752},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":304829,"byte_end":304838,"line_start":91,"line_end":91,"column_start":35,"column_end":44},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":2752},"to":{"krate":2,"index":2656}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":305109,"byte_end":305118,"line_start":102,"line_end":102,"column_start":44,"column_end":53},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":2752},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":307905,"byte_end":307910,"line_start":167,"line_end":167,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":396622,"byte_end":396633,"line_start":40,"line_end":40,"column_start":19,"column_end":30},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":2758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408170,"byte_end":408185,"line_start":327,"line_end":327,"column_start":26,"column_end":41},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":2778},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408316,"byte_end":408321,"line_start":336,"line_end":336,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":2598},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408324,"byte_end":408328,"line_start":336,"line_end":336,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1710},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408331,"byte_end":408336,"line_start":336,"line_end":336,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":8426},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408339,"byte_end":408346,"line_start":336,"line_end":336,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2632},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408349,"byte_end":408351,"line_start":336,"line_end":336,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2416},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408354,"byte_end":408363,"line_start":336,"line_end":336,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":2410},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408366,"byte_end":408376,"line_start":336,"line_end":336,"column_start":55,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":2464},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":408379,"byte_end":408382,"line_start":336,"line_end":336,"column_start":68,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":2446},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":412981,"byte_end":412985,"line_start":467,"line_end":467,"column_start":5,"column_end":9},"kind":"SuperTrait","from":{"krate":2,"index":1710},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":412988,"byte_end":412993,"line_start":467,"line_end":467,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":2598},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":412996,"byte_end":413001,"line_start":467,"line_end":467,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":8426},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":413004,"byte_end":413006,"line_start":467,"line_end":467,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2416},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":413009,"byte_end":413018,"line_start":467,"line_end":467,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2410},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":413021,"byte_end":413031,"line_start":467,"line_end":467,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2464},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,105,110,116,101,114,118,97,108,46,114,115],"byte_start":413034,"byte_end":413037,"line_start":467,"line_end":467,"column_start":58,"column_end":61},"kind":"SuperTrait","from":{"krate":2,"index":2446},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":415952,"byte_end":415960,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":2784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":442643,"byte_end":442651,"line_start":840,"line_end":840,"column_start":21,"column_end":29},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":2784},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":442927,"byte_end":442934,"line_start":850,"line_end":850,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":2800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443432,"byte_end":443439,"line_start":872,"line_end":872,"column_start":20,"column_end":27},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":2800},"to":{"krate":2,"index":2410}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443541,"byte_end":443548,"line_start":878,"line_end":878,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":2800},"to":{"krate":2,"index":2464}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443687,"byte_end":443694,"line_start":884,"line_end":884,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":2800},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":443961,"byte_end":443968,"line_start":894,"line_end":894,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":2800},"to":{"krate":2,"index":2644}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":444048,"byte_end":444055,"line_start":900,"line_end":900,"column_start":21,"column_end":28},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":2800},"to":{"krate":2,"index":1944}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,108,105,116,101,114,97,108,47,109,111,100,46,114,115],"byte_start":444167,"byte_end":444174,"line_start":907,"line_end":907,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":2800},"to":{"krate":2,"index":1962}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":470474,"byte_end":470488,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":2814},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":470572,"byte_end":470586,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":2814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":471661,"byte_end":471668,"line_start":57,"line_end":57,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":2824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":472324,"byte_end":472330,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":2830},"to":{"krate":0,"index":1260}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,112,114,105,110,116,46,114,115],"byte_start":477264,"byte_end":477270,"line_start":212,"line_end":212,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":2830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":482199,"byte_end":482216,"line_start":21,"line_end":21,"column_start":18,"column_end":35},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":2836},"to":{"krate":2,"index":2632}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":482306,"byte_end":482323,"line_start":27,"line_end":27,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":2836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":485462,"byte_end":485472,"line_start":114,"line_end":114,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":2846},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":488566,"byte_end":488574,"line_start":185,"line_end":185,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":2856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":490099,"byte_end":490110,"line_start":233,"line_end":233,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":2866},"to":{"krate":0,"index":394}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":504304,"byte_end":504315,"line_start":592,"line_end":592,"column_start":14,"column_end":25},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":2866},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,116,114,97,110,115,108,97,116,101,46,114,115],"byte_start":518509,"byte_end":518514,"line_start":993,"line_end":993,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":2876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":592318,"byte_end":592329,"line_start":98,"line_end":98,"column_start":10,"column_end":21},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,118,105,115,105,116,111,114,46,114,115],"byte_start":595684,"byte_end":595689,"line_start":192,"line_end":192,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":313886,"byte_end":313891,"line_start":36,"line_end":36,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":2892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":315987,"byte_end":315996,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":2912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":316902,"byte_end":316907,"line_start":115,"line_end":115,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":2892},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":317009,"byte_end":317014,"line_start":121,"line_end":121,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":2892},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":317153,"byte_end":317162,"line_start":127,"line_end":127,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":2912},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":320952,"byte_end":320955,"line_start":211,"line_end":211,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":2930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":340290,"byte_end":340297,"line_start":687,"line_end":687,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":2950},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":341506,"byte_end":341509,"line_start":723,"line_end":723,"column_start":23,"column_end":26},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":2930},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":342228,"byte_end":342235,"line_start":744,"line_end":744,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":2970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":343708,"byte_end":343713,"line_start":781,"line_end":781,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":2990},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":345483,"byte_end":345495,"line_start":831,"line_end":831,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":3010},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":349687,"byte_end":349703,"line_start":946,"line_end":946,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":3030},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":350160,"byte_end":350177,"line_start":964,"line_end":964,"column_start":21,"column_end":38},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":3036},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":350784,"byte_end":350801,"line_start":984,"line_end":984,"column_start":19,"column_end":36},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":3036},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":352275,"byte_end":352292,"line_start":1037,"line_end":1037,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":3036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":353248,"byte_end":353258,"line_start":1070,"line_end":1070,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":3074},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":356576,"byte_end":356590,"line_start":1163,"line_end":1163,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":3094},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":357029,"byte_end":357044,"line_start":1181,"line_end":1181,"column_start":19,"column_end":34},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":3100},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":358298,"byte_end":358313,"line_start":1224,"line_end":1224,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":3100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":359045,"byte_end":359060,"line_start":1250,"line_end":1250,"column_start":21,"column_end":36},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":3100},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":361222,"byte_end":361234,"line_start":1307,"line_end":1307,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":3156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":363398,"byte_end":363408,"line_start":1372,"line_end":1372,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":3214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":365325,"byte_end":365328,"line_start":1420,"line_end":1420,"column_start":15,"column_end":18},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":2930},"to":{"krate":2,"index":1978}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,104,105,114,47,109,111,100,46,114,115],"byte_start":367682,"byte_end":367689,"line_start":1492,"line_end":1492,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":3274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":596588,"byte_end":596601,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[110]},"from":{"krate":0,"index":3338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,112,97,114,115,101,114,46,114,115],"byte_start":603607,"byte_end":603613,"line_start":180,"line_end":180,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[111]},"from":{"krate":0,"index":3352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":605484,"byte_end":605497,"line_start":38,"line_end":38,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[112]},"from":{"krate":0,"index":3368},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":605524,"byte_end":605537,"line_start":40,"line_end":40,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[113]},"from":{"krate":0,"index":3368},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":606161,"byte_end":606177,"line_start":58,"line_end":58,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[114]},"from":{"krate":0,"index":3374},"to":{"krate":1,"index":2470}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":606204,"byte_end":606220,"line_start":60,"line_end":60,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[115]},"from":{"krate":0,"index":3374},"to":{"krate":2,"index":8430}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,110,105,99,111,100,101,46,114,115],"byte_start":610662,"byte_end":610672,"line_start":187,"line_end":187,"column_start":10,"column_end":20},"kind":{"variant":"Impl","fields":[116]},"from":{"krate":0,"index":3380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":642856,"byte_end":642868,"line_start":110,"line_end":110,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[117]},"from":{"krate":0,"index":3402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645026,"byte_end":645038,"line_start":179,"line_end":179,"column_start":21,"column_end":33},"kind":{"variant":"Impl","fields":[118]},"from":{"krate":0,"index":3402},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":645718,"byte_end":645727,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[119]},"from":{"krate":0,"index":3436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":646005,"byte_end":646014,"line_start":213,"line_end":213,"column_start":21,"column_end":30},"kind":{"variant":"Impl","fields":[120]},"from":{"krate":0,"index":3436},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":648318,"byte_end":648331,"line_start":277,"line_end":277,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[121]},"from":{"krate":0,"index":1742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":649137,"byte_end":649148,"line_start":306,"line_end":306,"column_start":21,"column_end":32},"kind":{"variant":"Impl","fields":[122]},"from":{"krate":0,"index":1752},"to":{"krate":2,"index":8426}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":649304,"byte_end":649317,"line_start":312,"line_end":312,"column_start":19,"column_end":32},"kind":{"variant":"Impl","fields":[123]},"from":{"krate":0,"index":1742},"to":{"krate":2,"index":4316}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,110,110,111,114,99,97,110,116,114,101,108,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,101,103,101,120,45,115,121,110,116,97,120,45,48,46,54,46,49,50,47,115,114,99,47,117,116,102,56,46,114,115],"byte_start":651279,"byte_end":651290,"line_start":366,"line_end":366,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[124]},"from":{"krate":0,"index":1752},"to":{"krate":4294967295,"index":4294967295}}]}